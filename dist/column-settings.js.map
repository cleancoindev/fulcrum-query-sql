{"version":3,"sources":["../src/column-settings.js"],"names":["ColumnSettings","schema","_schema","_columns","_columnsByID","columns","slice","column","item","push","id","reset","map","o","clear","toJSON","move","from","to","byColumn","filter","c","isVisible"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,c;AACnB,0BAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKC,OAAL,GAAeD,MAAf;;AAEA,SAAKE,QAAL,GAAgB,EAAhB;AACA,SAAKC,YAAL,GAAoB,EAApB;;AAEA,QAAMC,UAAUJ,OAAOI,OAAP,CAAeC,KAAf,EAAhB;;AAEA,yBAAqBD,OAArB,kHAA8B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAnBE,MAAmB;;AAC5B,UAAMC,OAAO,iCAAuB,EAACD,cAAD,EAAvB,EAAiC,KAAKL,OAAtC,CAAb;;AAEA,WAAKC,QAAL,CAAcM,IAAd,CAAmBD,IAAnB;AACA,WAAKJ,YAAL,CAAkBG,OAAOG,EAAzB,IAA+BF,IAA/B;AACD;AACF;;2BAEDG,K,oBAAQ;AACN,SAAKR,QAAL,CAAcS,GAAd,CAAkB;AAAA,aAAKC,EAAEC,KAAF,EAAL;AAAA,KAAlB;AACD,G;;2BAEDC,M,qBAAS;AACP,WAAO,KAAKV,OAAL,CAAaO,GAAb,CAAiB;AAAA,aAAKC,EAAEE,MAAF,EAAL;AAAA,KAAjB,CAAP;AACD,G;;2BAEDC,I,iBAAKC,I,EAAMC,E,EAAI;AACb,SAAKf,QAAL,GAAgB,yBAAU,KAAKA,QAAf,EAAyBc,IAAzB,EAA+BC,EAA/B,CAAhB;AACD,G;;2BAcDC,Q,qBAASZ,M,EAAQ;AACf,WAAO,KAAKH,YAAL,CAAkBG,OAAOG,EAAzB,CAAP;AACD,G;;;;wBAdoB;AACnB,aAAO,KAAKL,OAAL,CAAae,MAAb,CAAoB;AAAA,eAAKC,EAAEC,SAAP;AAAA,OAApB,EAAsCV,GAAtC,CAA0C;AAAA,eAAKS,EAAEd,MAAP;AAAA,OAA1C,CAAP;AACD;;;wBAEa;AACZ,aAAO,KAAKJ,QAAZ;AACD;;;wBAEiB;AAChB,aAAO,KAAKC,YAAZ;AACD;;;;;;kBAvCkBJ,c","file":"column-settings.js","sourcesContent":["import arrayMove from 'array-move';\nimport ColumnSettingsItem from './column-settings-item';\n\nexport default class ColumnSettings {\n  constructor(schema) {\n    this._schema = schema;\n\n    this._columns = [];\n    this._columnsByID = {};\n\n    const columns = schema.columns.slice();\n\n    for (const column of columns) {\n      const item = new ColumnSettingsItem({column}, this._schema);\n\n      this._columns.push(item);\n      this._columnsByID[column.id] = item;\n    }\n  }\n\n  reset() {\n    this._columns.map(o => o.clear());\n  }\n\n  toJSON() {\n    return this.columns.map(o => o.toJSON());\n  }\n\n  move(from, to) {\n    this._columns = arrayMove(this._columns, from, to);\n  }\n\n  get enabledColumns() {\n    return this.columns.filter(c => c.isVisible).map(c => c.column);\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  get columnsByID() {\n    return this._columnsByID;\n  }\n\n  byColumn(column) {\n    return this._columnsByID[column.id];\n  }\n}\n"]}