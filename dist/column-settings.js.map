{"version":3,"sources":["../src/column-settings.js"],"names":["ColumnSettings","schema","settings","_schema","_columns","_columnsByID","existingSettingsByID","setting","column","id","columns","slice","existingAttributes","item","push","reset","map","o","clear","toJSON","move","from","to","byColumn","enabledColumnSettings","c","filter","isVisible"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,c;AACnB,0BAAYC,MAAZ,EAAoBC,QAApB,EAA8B;AAAA;;AAC5B,SAAKC,OAAL,GAAeF,MAAf;;AAEA,SAAKG,QAAL,GAAgB,EAAhB;AACA,SAAKC,YAAL,GAAoB,EAApB;;AAEA,QAAMC,uBAAuB,EAA7B;;AAEA,QAAIJ,QAAJ,EAAc;AACZ,2BAAsBA,QAAtB,kHAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAArBK,OAAqB;;AAC9BD,6BAAqBC,QAAQC,MAAR,CAAeC,EAApC,IAA0CF,OAA1C;AACD;AACF;;AAED,QAAMG,UAAUT,OAAOS,OAAP,CAAeC,KAAf,EAAhB;;AAEA,0BAAqBD,OAArB,yHAA8B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,UAAnBF,MAAmB;;AAC5B,UAAMI,qBAAqBN,qBAAqBE,OAAOC,EAA5B,CAA3B;;AAEA,UAAMI,OAAO,8CAA2BD,kBAA3B,IAA+CJ,cAA/C,KAAwD,KAAKL,OAA7D,CAAb;;AAEA,WAAKC,QAAL,CAAcU,IAAd,CAAmBD,IAAnB;AACA,WAAKR,YAAL,CAAkBG,OAAOC,EAAzB,IAA+BI,IAA/B;AACD;AACF;;2BAEDE,K,oBAAQ;AACN,SAAKX,QAAL,CAAcY,GAAd,CAAkB;AAAA,aAAKC,EAAEC,KAAF,EAAL;AAAA,KAAlB;AACD,G;;2BAEDC,M,qBAAS;AACP,WAAO,KAAKT,OAAL,CAAaM,GAAb,CAAiB;AAAA,aAAKC,EAAEE,MAAF,EAAL;AAAA,KAAjB,CAAP;AACD,G;;2BAEDC,I,iBAAKC,I,EAAMC,E,EAAI;AACb,SAAKlB,QAAL,GAAgB,yBAAU,KAAKA,QAAf,EAAyBiB,IAAzB,EAA+BC,EAA/B,CAAhB;AACD,G;;2BAkBDC,Q,qBAASf,M,EAAQ;AACf,WAAO,KAAKH,YAAL,CAAkBG,OAAOC,EAAzB,CAAP;AACD,G;;;;wBAlBoB;AACnB,aAAO,KAAKe,qBAAL,CAA2BR,GAA3B,CAA+B;AAAA,eAAKS,EAAEjB,MAAP;AAAA,OAA/B,CAAP;AACD;;;wBAE2B;AAC1B,aAAO,KAAKE,OAAL,CAAagB,MAAb,CAAoB;AAAA,eAAKD,EAAEE,SAAP;AAAA,OAApB,CAAP;AACD;;;wBAEa;AACZ,aAAO,KAAKvB,QAAZ;AACD;;;wBAEiB;AAChB,aAAO,KAAKC,YAAZ;AACD;;;;;;kBArDkBL,c","file":"column-settings.js","sourcesContent":["import arrayMove from 'array-move';\nimport ColumnSettingsItem from './column-settings-item';\n\nexport default class ColumnSettings {\n  constructor(schema, settings) {\n    this._schema = schema;\n\n    this._columns = [];\n    this._columnsByID = {};\n\n    const existingSettingsByID = {};\n\n    if (settings) {\n      for (const setting of settings) {\n        existingSettingsByID[setting.column.id] = setting;\n      }\n    }\n\n    const columns = schema.columns.slice();\n\n    for (const column of columns) {\n      const existingAttributes = existingSettingsByID[column.id];\n\n      const item = new ColumnSettingsItem({...existingAttributes, column}, this._schema);\n\n      this._columns.push(item);\n      this._columnsByID[column.id] = item;\n    }\n  }\n\n  reset() {\n    this._columns.map(o => o.clear());\n  }\n\n  toJSON() {\n    return this.columns.map(o => o.toJSON());\n  }\n\n  move(from, to) {\n    this._columns = arrayMove(this._columns, from, to);\n  }\n\n  get enabledColumns() {\n    return this.enabledColumnSettings.map(c => c.column);\n  }\n\n  get enabledColumnSettings() {\n    return this.columns.filter(c => c.isVisible);\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  get columnsByID() {\n    return this._columnsByID;\n  }\n\n  byColumn(column) {\n    return this._columnsByID[column.id];\n  }\n}\n"]}