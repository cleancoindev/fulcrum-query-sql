{"version":3,"sources":["../../src/ast/converter.js"],"names":["Converter","BooleanConverter","type","condition","options","args","nodeForExpressions","expressions","length","AndConverter","OrConverter","NotConverter","NotEmptyConverter","expression","columnName","EmptyConverter","EqualConverter","BinaryConverter","NotEqualConverter","GreaterThanConverter","GreaterThanOrEqualConverter","LessThanConverter","LessThanOrEqualConverter","BetweenConverter","value","NotBetweenConverter","InConverter","values","map","v","NotInConverter","kind","operator","scalarValue","FieldConverter","name","ConstantConverter","TextEqualConverter","TextNotEqualConverter","TextContainConverter","escapeLikePercent","TextNotContainConverter","TextStartsWithConverter","TextEndsWithConverter","TextMatchConverter","TextNotMatchConverter","ArrayAnyOfConverter","ArrayAllOfConverter","ArrayEqualConverter","a","b","SearchConverter","rhs","DynamicDateConverter","timeZone","tz","guess","now","range","value1","clone","value2","constant1","toISOString","constant2","toAST","query","sort","pageSize","pageIndex","boundingBox","searchFilter","targetList","fromClause","whereClause","sortClause","limitOffset","limitCount","toCountAST","toTileAST","form","id","toHistogramAST","bucketSize","withClause","histogramWithClause","seriesFunctionSublinkSelect","seriesFunctionArgs","seriesFunctionCall","seriesFunction","bucketWidthFunctionCallArgs","bucketsSubqueryTargetList","bucketsSubqueryFromClause","bucketsSubqueryGroupClause","bucketsSubquerySortClause","bucketsSubquery","groupClause","bucketsSubselect","joinExpr","toDistinctValuesAST","array","push","by","recordsTargetList","datePartArgs","recordsFromClause","recordsSelect","recordsExpr","statsTargetList","statsFromClause","statsSelect","statsExpr","search","systemParts","filterNode","nodeForCondition","filter","dateFilter","dateExpression","nodeForExpression","boundingBoxFilter","trim","columnFilterKeys","Object","keys","columnFilters","key","hasValues","hasNull","forEach","expr","isEmptySet","replace","toTsQuery","dictionary","term","makeTsQueryCall","toLowerCase","terms","split","s","shift","tsQueries","ftsExpression","ilikeExpression","andArgs","e","converter","And","Or","Not","Empty","NotEmpty","Equal","NotEqual","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","Between","NotBetween","In","NotIn","TextContain","TextNotContain","TextStartsWith","TextEndsWith","TextEqual","TextNotEqual","TextMatch","TextNotMatch","DateEqual","DateNotEqual","DateAfter","DateOnOrAfter","DateBefore","DateOnOrBefore","ArrayAnyOf","ArrayAllOf","ArrayEqual","Search","DateToday","DateYesterday","DateTomorrow","DateLastWeek","DateLastMonth","DateLastYear","DateNextWeek","DateNextMonth","DateNextYear","DateCurrentCalendarWeek","DateCurrentCalendarMonth","DateCurrentCalendarYear","DatePreviousCalendarWeek","DatePreviousCalendarMonth","DatePreviousCalendarYear","DateNextCalendarWeek","DateNextCalendarMonth","DateNextCalendarYear","DateDaysFromNow","DateDaysAgo","isValid"],"mappings":"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","file":"converter.js","sourcesContent":["import { ColumnRef,\n         ResTarget,\n         AStar,\n         RangeVar,\n         SelectStmt,\n         BoolExpr,\n         NullTest,\n         AExpr,\n         AConst,\n         StringValue,\n         AArrayExpr,\n         IntegerValue,\n         FloatValue,\n         SortBy,\n         TypeCast,\n         TypeName,\n         FuncCall,\n         WindowDef,\n         RangeSubselect,\n         WithClause,\n         CommonTableExpr,\n         RangeFunction,\n         JoinExpr,\n         Alias,\n         CoalesceExpr,\n         SubLink } from './helpers';\n\nimport { ConditionType } from '../condition';\nimport { OperatorType, calculateDateRange } from '../operator';\nimport moment from 'moment-timezone';\n\n// import { SelectStmt } from './ast/helpers';\n\nexport default class Converter {\n  toAST(query, {sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = this.targetList(query, sort);\n\n    const fromClause = this.fromClause(query);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    const sortClause = sort;\n\n    const limitOffset = this.limitOffset(pageSize, pageIndex);\n\n    const limitCount = this.limitCount(pageSize);\n\n    return SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount});\n  }\n\n  toCountAST(query, {boundingBox, searchFilter}) {\n    const targetList = [ ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'total_count') ];\n\n    const fromClause = this.fromClause(query);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toTileAST(query, {searchFilter}) {\n    const targetList = [\n      ResTarget(ColumnRef('_record_id')),\n      ResTarget(FuncCall('st_x', [ ColumnRef('_geometry') ]), 'x'),\n      ResTarget(FuncCall('st_y', [ ColumnRef('_geometry') ]), 'y'),\n      ResTarget(ColumnRef('_status')),\n      ResTarget(TypeCast(TypeName('text'), AConst(StringValue(query.form.id))), 'form_id')\n    ];\n\n    const fromClause = this.fromClause(query);\n\n    const whereClause = this.whereClause(query, null, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toHistogramAST(query, {columnName, bucketSize, type, sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = [\n      ResTarget(ColumnRef('series', 'series'), 'bucket'),\n      ResTarget(CoalesceExpr([ ColumnRef('count', 'sub'), AConst(IntegerValue(0)) ]), 'count'),\n      ResTarget(ColumnRef('min_value', 'sub'), 'min_value'),\n      ResTarget(ColumnRef('max_value', 'sub'), 'max_value'),\n      ResTarget(ColumnRef('avg_value', 'sub'), 'avg_value'),\n      ResTarget(ColumnRef('sum_value', 'sub'), 'sum_value')\n    ];\n\n    const withClause = this.histogramWithClause(columnName, bucketSize, type, query);\n\n    const seriesFunctionSublinkSelect = SelectStmt({\n      targetList: [ ResTarget(AExpr(0, '+', ColumnRef('buckets'), AConst(IntegerValue(1)))) ],\n      fromClause: [ RangeVar('__stats') ]\n    });\n\n    const seriesFunctionArgs = [\n      AConst(IntegerValue(1)),\n      SubLink(4, seriesFunctionSublinkSelect)\n    ];\n\n    const seriesFunctionCall = FuncCall('generate_series', seriesFunctionArgs);\n    const seriesFunction = RangeFunction([ [ seriesFunctionCall ] ], Alias('series'));\n\n    const bucketWidthFunctionCallArgs = [\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef('value')),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('min_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('max_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('buckets')) ], fromClause: [ RangeVar('__stats') ]}))\n    ];\n\n    const bucketsSubqueryTargetList = [\n      ResTarget(FuncCall('width_bucket', bucketWidthFunctionCallArgs), 'bucket'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(FuncCall('avg', [ ColumnRef('value') ]), 'avg_value'),\n      ResTarget(FuncCall('sum', [ ColumnRef('value') ]), 'sum_value')\n    ];\n\n    const bucketsSubqueryFromClause = [ RangeVar('__records') ];\n    const bucketsSubqueryGroupClause = [ AConst(IntegerValue(1)) ];\n    const bucketsSubquerySortClause = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n    const bucketsSubquery = SelectStmt({\n      targetList: bucketsSubqueryTargetList,\n      fromClause: bucketsSubqueryFromClause,\n      groupClause: bucketsSubqueryGroupClause,\n      sortClause: bucketsSubquerySortClause\n    });\n\n    const bucketsSubselect = RangeSubselect(bucketsSubquery, Alias('sub'));\n\n    const joinExpr = JoinExpr(1,\n                              seriesFunction,\n                              bucketsSubselect,\n                              AExpr(0, '=', ColumnRef('series', 'series'), ColumnRef('bucket', 'sub')));\n\n    return SelectStmt({targetList, fromClause: [ joinExpr ], withClause});\n  }\n\n  toDistinctValuesAST(query, options = {}) {\n    const targetList = options.array ? [ ResTarget(FuncCall('unnest', [ ColumnRef(options.name) ]), 'value') ]\n                                     : [ ResTarget(ColumnRef(options.name), 'value') ];\n\n    targetList.push(ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'));\n\n    const fromClause = this.fromClause(query);\n\n    const whereClause = null; // this.whereClause(query);\n\n    const groupClause = [ AConst(IntegerValue(1)) ];\n\n    const sortClause = [];\n\n    if (options.by === 'frequency') {\n      sortClause.push(SortBy(AConst(IntegerValue(2)), 2, 0));\n    }\n\n    sortClause.push(SortBy(AConst(IntegerValue(1)), 1, 0));\n\n    return SelectStmt({targetList, fromClause, whereClause, groupClause, sortClause});\n  }\n\n  histogramWithClause(columnName, bucketSize, type, query) {\n    let recordsTargetList = null;\n\n    if (type === 'date') {\n      const datePartArgs = [\n        AConst(StringValue('epoch')),\n        TypeCast(TypeName('date'), ColumnRef(columnName))\n      ];\n\n      recordsTargetList = [ ResTarget(FuncCall('date_part', datePartArgs), 'value') ];\n    } else {\n      recordsTargetList = [ ResTarget(TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef(columnName)), 'value') ];\n    }\n\n    const recordsFromClause = [ RangeVar(query.form.id + '/_full') ];\n    const recordsSelect = SelectStmt({targetList: recordsTargetList, fromClause: recordsFromClause});\n    const recordsExpr = CommonTableExpr('__records', recordsSelect);\n\n    const statsTargetList = [\n      ResTarget(AConst(IntegerValue(bucketSize)), 'buckets'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value')\n    ];\n\n    const statsFromClause = [ RangeVar('__records') ];\n    const statsSelect = SelectStmt({targetList: statsTargetList, fromClause: statsFromClause});\n    const statsExpr = CommonTableExpr('__stats', statsSelect);\n\n    return WithClause([ recordsExpr, statsExpr ]);\n  }\n\n  limitOffset(pageSize, pageIndex) {\n    if (pageSize != null && pageIndex != null) {\n      return AConst(IntegerValue(+pageIndex * +pageSize));\n    }\n\n    return null;\n  }\n\n  limitCount(pageSize) {\n    if (pageSize != null) {\n      return AConst(IntegerValue(+pageSize));\n    }\n\n    return null;\n  }\n\n  targetList(query, sort) {\n    return [\n      ResTarget(ColumnRef(AStar())),\n      ResTarget(FuncCall('row_number', null, WindowDef(sort, 530)), '_row_number')\n    ];\n  }\n\n  fromClause(query) {\n    return [ RangeVar(query.form.id + '/_full') ];\n  }\n\n  whereClause(query, boundingBox, search) {\n    const systemParts = [];\n    const filterNode = this.nodeForCondition(query.filter, query.options);\n\n    if (query.dateFilter) {\n      const dateExpression = this.nodeForExpression(query.dateFilter, query.options);\n\n      if (dateExpression) {\n        systemParts.push(dateExpression);\n      }\n    }\n\n    if (boundingBox) {\n      systemParts.push(this.boundingBoxFilter(boundingBox));\n    }\n\n    if (search && search.trim().length) {\n      systemParts.push(this.searchFilter(search));\n    }\n\n    const columnFilterKeys = Object.keys(query.columnFilters);\n\n    if (columnFilterKeys.length) {\n      for (const key of columnFilterKeys) {\n        const filter = query.columnFilters[key];\n\n        if (filter.hasValues) {\n          let hasNull = false;\n          const values = [];\n\n          filter.value.forEach(v => {\n            if (v !== null) {\n              values.push(AConst(StringValue(v)));\n            } else {\n              hasNull = true;\n            }\n          });\n\n          let expr = null;\n\n          if (values.length) {\n            expr = AExpr(6, '=', ColumnRef(filter.columnName),\n                         values);\n\n            if (hasNull) {\n              expr = BoolExpr(1, [ NullTest(0, ColumnRef(filter.columnName)), expr ]);\n            }\n          } else if (hasNull) {\n            expr = NullTest(0, ColumnRef(filter.columnName));\n          }\n\n          systemParts.push(expr);\n        } else if (filter.isEmptySet) {\n          // add 1 = 0 clause to return 0 rows\n          const expr = AExpr(0, '=', AConst(IntegerValue(1)),\n                             AConst(IntegerValue(0)));\n\n          systemParts.push(expr);\n        }\n      }\n    }\n\n    if (filterNode && systemParts.length) {\n      return BoolExpr(0, [ filterNode, ...systemParts ]);\n    } else if (systemParts.length) {\n      return BoolExpr(0, [ ...systemParts ]);\n    }\n\n    return filterNode;\n  }\n\n  boundingBoxFilter(boundingBox) {\n    const args = [\n      AConst(FloatValue(boundingBox[0])),\n      AConst(FloatValue(boundingBox[1])),\n      AConst(FloatValue(boundingBox[2])),\n      AConst(FloatValue(boundingBox[3])),\n      AConst(IntegerValue(4326))\n    ];\n\n    const rhs = FuncCall('st_makeenvelope', args);\n\n    return AExpr(0, '&&', ColumnRef('_geometry'), rhs);\n  }\n\n  escapeLikePercent(value) {\n    return value.replace(/\\%/g, '\\\\%');\n  }\n\n  searchFilter(search) {\n    /*\n       Search takes the general form:\n\n       SELECT ...\n       FROM ...\n       WHERE\n         _record_index @@ to_tsquery('english', '''bacon'':*'::tsquery::text) AND\n         _record_index_text ILIKE '%bacon%'\n\n       NB: The awkward cast through a text type is to properly escape raw user input as a tsquery.\n\n       For example:\n         to_tsquery('Nor:*') vs 'Nor:*'::tsquery\n\n       Also, the ILIKE handles further reduces the resultset to exact matches which is what Fulcrum\n       users more often expect. The general idea is to use the FTS index to massively reduce the result\n       set before applying the much slower ILIKE operation. So, we can reduce the result very quickly\n       with the tsvector index first, and then only run the ILIKE on what's left.\n    */\n\n    search = search.trim();\n\n    const toTsQuery = (dictionary, term) => {\n      const args = [ AConst(StringValue(dictionary)), AConst(StringValue(\"'\" + term + \"':*\")) ];\n\n      return FuncCall('to_tsquery', args);\n    };\n\n    const makeTsQueryCall = (term) => {\n      return toTsQuery(term.length > 3 ? 'english' : 'simple',\n                       term.toLowerCase().replace(/'/g, \"''\"));\n    };\n\n    const terms = search.split(' ').filter(s => s.trim().length);\n\n    let term = terms.shift();\n\n    let tsQueries = makeTsQueryCall(term);\n\n    while (terms.length) {\n      term = terms.shift();\n      tsQueries = AExpr(0, '&&', tsQueries, makeTsQueryCall(term));\n    }\n\n    const ftsExpression = AExpr(0, '@@', ColumnRef('_record_index'), tsQueries);\n\n    const ilikeExpression = AExpr(8, '~~*', ColumnRef('_record_index_text'),\n                                  AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n\n    const andArgs = [\n      ftsExpression,\n      ilikeExpression\n    ];\n\n    return BoolExpr(0, andArgs);\n  }\n\n  nodeForExpressions(expressions, options) {\n    return expressions.map(e => this.nodeForExpression(e, options))\n                      .filter(e => e);\n  }\n\n  nodeForCondition(condition, options) {\n    const converter = {\n      [ConditionType.And]: this.AndConverter,\n      [ConditionType.Or]: this.OrConverter,\n      [ConditionType.Not]: this.NotConverter\n    };\n\n    return converter[condition.type](condition, options);\n  }\n\n  nodeForExpression(expression, options) {\n    if (expression.expressions) {\n      return this.nodeForCondition(expression, options);\n    }\n\n    const converter = {\n      [OperatorType.Empty.name]: this.EmptyConverter,\n      [OperatorType.NotEmpty.name]: this.NotEmptyConverter,\n      [OperatorType.Equal.name]: this.EqualConverter,\n      [OperatorType.NotEqual.name]: this.NotEqualConverter,\n      [OperatorType.GreaterThan.name]: this.GreaterThanConverter,\n      [OperatorType.GreaterThanOrEqual.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.LessThan.name]: this.LessThanConverter,\n      [OperatorType.LessThanOrEqual.name]: this.LessThanOrEqualConverter,\n      [OperatorType.Between.name]: this.BetweenConverter,\n      [OperatorType.NotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.In.name]: this.InConverter,\n      [OperatorType.NotIn.name]: this.NotInConverter,\n      [OperatorType.TextContain.name]: this.TextContainConverter,\n      [OperatorType.TextNotContain.name]: this.TextNotContainConverter,\n      [OperatorType.TextStartsWith.name]: this.TextStartsWithConverter,\n      [OperatorType.TextEndsWith.name]: this.TextEndsWithConverter,\n      [OperatorType.TextEqual.name]: this.TextEqualConverter,\n      [OperatorType.TextNotEqual.name]: this.TextNotEqualConverter,\n      [OperatorType.TextMatch.name]: this.TextMatchConverter,\n      [OperatorType.TextNotMatch.name]: this.TextNotMatchConverter,\n      [OperatorType.DateEqual.name]: this.EqualConverter,\n      [OperatorType.DateNotEqual.name]: this.NotEqualConverter,\n      [OperatorType.DateAfter.name]: this.GreaterThanConverter,\n      [OperatorType.DateOnOrAfter.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.DateBefore.name]: this.LessThanConverter,\n      [OperatorType.DateOnOrBefore.name]: this.LessThanOrEqualConverter,\n      [OperatorType.ArrayAnyOf.name]: this.ArrayAnyOfConverter,\n      [OperatorType.ArrayAllOf.name]: this.ArrayAllOfConverter,\n      [OperatorType.ArrayEqual.name]: this.ArrayEqualConverter,\n      [OperatorType.Search.name]: this.SearchConverter,\n      [OperatorType.DateToday.name]: this.DynamicDateConverter,\n      [OperatorType.DateYesterday.name]: this.DynamicDateConverter,\n      [OperatorType.DateTomorrow.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysAgo.name]: this.DynamicDateConverter\n    };\n\n    if (!expression.isValid) {\n      return null;\n    }\n\n    return converter[expression.operator](expression, options);\n  }\n\n  BooleanConverter = (type, condition, options) => {\n    const args = this.nodeForExpressions(condition.expressions, options);\n\n    if (args && args.length) {\n      return BoolExpr(type, args);\n    }\n\n    return null;\n  }\n\n  AndConverter = (condition, options) => {\n    return this.BooleanConverter(0, condition, options);\n  }\n\n  OrConverter = (condition, options) => {\n    return this.BooleanConverter(1, condition, options);\n  }\n\n  NotConverter = (condition, options) => {\n    if (condition.expressions.length > 1) {\n      return BoolExpr(2, [ this.BooleanConverter(0, condition, options) ]);\n    }\n\n    return this.BooleanConverter(2, condition, options);\n  }\n\n  NotEmptyConverter = (expression) => {\n    return NullTest(1, ColumnRef(expression.columnName));\n  }\n\n  EmptyConverter = (expression) => {\n    return NullTest(0, ColumnRef(expression.columnName));\n  }\n\n  EqualConverter = (expression) => {\n    return this.BinaryConverter(0, '=', expression);\n  }\n\n  NotEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<>', expression);\n  }\n\n  GreaterThanConverter = (expression) => {\n    return this.BinaryConverter(0, '>', expression);\n  }\n\n  GreaterThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '>=', expression);\n  }\n\n  LessThanConverter = (expression) => {\n    return this.BinaryConverter(0, '<', expression);\n  }\n\n  LessThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<=', expression);\n  }\n\n  BetweenConverter = (expression) => {\n    return AExpr(10, 'BETWEEN', ColumnRef(expression.columnName),\n                 [ AConst(StringValue(expression.value[0])), AConst(StringValue(expression.value[1])) ]);\n  }\n\n  NotBetweenConverter = (expression) => {\n    return AExpr(11, 'NOT BETWEEN', ColumnRef(expression.columnName),\n                 [ AConst(StringValue(expression.value[0])), AConst(StringValue(expression.value[1])) ]);\n  }\n\n  InConverter = (expression) => {\n    const values = expression.value.map(v => AConst(StringValue(v)));\n\n    return AExpr(6, '=', ColumnRef(expression.columnName),\n                 values);\n  }\n\n  NotInConverter = (expression) => {\n    const values = expression.value.map(v => AConst(StringValue(v)));\n\n    return AExpr(6, '<>', ColumnRef(expression.columnName),\n                 values);\n  }\n\n  BinaryConverter = (kind, operator, expression) => {\n    return AExpr(kind, operator, ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  FieldConverter = (expression) => {\n    return ColumnRef(expression.name);\n  }\n\n  ConstantConverter = (expression) => {\n    return AConst(StringValue(expression.scalarValue));\n  }\n\n  TextEqualConverter = (expression) => {\n    return AExpr(8, '~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  TextNotEqualConverter = (expression) => {\n    return AExpr(8, '!~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  TextContainConverter = (expression) => {\n    return AExpr(8, '~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextNotContainConverter = (expression) => {\n    return AExpr(8, '!~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextStartsWithConverter = (expression) => {\n    return AExpr(8, '~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextEndsWithConverter = (expression) => {\n    return AExpr(8, '~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue))));\n  }\n\n  TextMatchConverter = (expression) => {\n    return AExpr(0, '~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  TextNotMatchConverter = (expression) => {\n    return AExpr(0, '!~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  ArrayAnyOfConverter = (expression) => {\n    const values = AArrayExpr(expression.value.map(v => AConst(StringValue(v))));\n\n    return AExpr(0, '&&', ColumnRef(expression.columnName),\n                 values);\n  }\n\n  ArrayAllOfConverter = (expression) => {\n    const values = AArrayExpr(expression.value.map(v => AConst(StringValue(v))));\n\n    return AExpr(0, '@>', ColumnRef(expression.columnName),\n                 values);\n  }\n\n  ArrayEqualConverter = (expression) => {\n    const values = AArrayExpr(expression.value.map(v => AConst(StringValue(v))));\n\n    const a = AExpr(0, '<@', ColumnRef(expression.columnName),\n                    values);\n\n    const b = AExpr(0, '@>', ColumnRef(expression.columnName),\n                    values);\n\n    return BoolExpr(0, [ a, b ]);\n  }\n\n  SearchConverter = (expression) => {\n    const rhs = FuncCall('to_tsquery', [ AConst(StringValue(expression.scalarValue)) ]);\n\n    return AExpr(0, '@@', ColumnRef(expression.columnName),\n                 rhs);\n  }\n\n  DynamicDateConverter = (expression, options) => {\n    // Let the caller specify the timezone to be used for dynamic date calculations. This\n    // makes sure when the browser calculates a dynamic range, the server would calculate\n    // the same range. So 'Today' is midnight to midnight in the user's local time. It would\n    // be much less useful and confusing if we forced \"Today\" to always be London's today.\n    const timeZone = (options && options.timeZone) || moment.tz.guess();\n\n    const now = moment().tz(timeZone);\n\n    const range = calculateDateRange(expression.operator, expression.value, now);\n\n    const value1 = range[0] && range[0].clone();\n    const value2 = range[1] && range[1].clone();\n\n    const constant1 = value1 && AConst(StringValue(value1.toISOString()));\n    const constant2 = value2 && AConst(StringValue(value2.toISOString()));\n\n    if (constant1 && constant2) {\n      return AExpr(10, 'BETWEEN', ColumnRef(expression.columnName), [ constant1, constant2 ]);\n    } else if (constant1) {\n      return AExpr(0, '>=', ColumnRef(expression.columnName), constant1);\n    } else if (constant2) {\n      return AExpr(0, '<=', ColumnRef(expression.columnName), constant2);\n    }\n\n    return null;\n  }\n}\n"]}