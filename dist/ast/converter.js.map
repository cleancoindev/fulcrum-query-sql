{"version":3,"sources":["../../src/ast/converter.js"],"names":["MAX_DISTINCT_VALUES","MAX_TILE_RECORDS","columnRef","column","isSQL","id","source","columnName","Converter","BooleanConverter","type","condition","options","args","nodeForExpressions","expressions","length","AndConverter","OrConverter","NotConverter","NotEmptyConverter","expression","EmptyConverter","EqualConverter","BinaryConverter","NotEqualConverter","GreaterThanConverter","GreaterThanOrEqualConverter","LessThanConverter","LessThanOrEqualConverter","BetweenConverter","value1","value2","isDateOperator","ConvertDateValue","GetDate","isDateTime","startOf","endOf","Between","NotBetweenConverter","NotBetween","InConverter","In","arrayValue","NotInConverter","NotIn","kind","operator","ConstValue","scalarValue","FieldConverter","name","ConstantConverter","TextEqualConverter","ConvertToText","TextNotEqualConverter","TextContainConverter","escapeLikePercent","TextNotContainConverter","TextStartsWithConverter","TextEndsWithConverter","TextMatchConverter","IsValidRegExp","TextNotMatchConverter","ArrayAnyOfConverter","AnyOf","ArrayAllOfConverter","values","map","v","ArrayEqualConverter","a","b","SearchConverter","rhs","DynamicDateConverter","now","range","value","arrayValues","hasNull","inValues","forEach","push","isInteger","isNumber","date","Date","toISOString","replace","utc","timeZone","tz","guess","clone","isDate","isTime","isArray","string","RegExp","ex","toAST","query","sort","pageSize","pageIndex","boundingBox","searchFilter","targetList","joins","joinColumnsWithSorting","o","join","fromClause","whereClause","sortClause","limitOffset","limitCount","toCountAST","joinColumns","toTileAST","ast","over","statusColumn","schema","repeatable","form","toHistogramAST","bucketSize","subLinkColumn","col","table","expr","lhs","op","withClause","histogramWithClause","seriesFunctionSublinkSelect","seriesFunctionArgs","seriesFunctionCall","seriesFunction","bucketWidthFunctionCallArgs","bucketsSubqueryTargetList","bucketsSubqueryFromClause","bucketsSubqueryGroupClause","bucketsSubquerySortClause","bucketsSubquery","groupClause","bucketsSubselect","joinExpr","toDistinctValuesAST","valueColumn","isLinkedRecord","element","isRecordLinkElement","unnestArrays","isCalculatedElement","display","timeZoneCast","param","toTimestamp","inner","tableName","key","alias","sourceColumn","joinColumn","subQuery","linkedSubselect","rarg","sourceTableName","by","toSummaryAST","columnSetting","summary","aggregate","Histogram","histogramAttributes","summaryTargetList","summaryWhereClause","recordsTargetList","datePartArgs","recordsFromClause","recordsWhere","recordsSelect","recordsExpr","statsTargetList","statsFromClause","statsSelect","statsExpr","toSchemaAST","schemaOnly","list","subJoinColumns","indexOf","createdByColumn","updatedByColumn","assignedToColumn","projectColumn","leftJoins","exactColumns","baseQuery","queryAST","referencedColumns","concat","JSON","parse","stringify","duplicateResTargetWithExactName","SelectStmt","formQueryRangeVar","visitedTables","joinClause","search","systemParts","filterNode","nodeForCondition","filter","boundingBoxFilter","trim","nodeForExpression","dateFilter","createExpressionForColumnFilter","statusFilter","projectFilter","assignmentFilter","changesetFilter","columnSettings","columns","item","hasFilter","isValid","apply","exactName","resTarget","findResTarget","existing","ResTarget","hasStar","find","target","val","ColumnRef","fields","A_Star","index","repeatableKey","except","hasValues","getTime","isEmptySet","xmin","ymin","xmax","ymax","box1","box2","boxes","geometryQuery","toTsQuery","dictionary","term","makeTsQueryCall","toLowerCase","terms","split","s","shift","tsQueries","ftsExpression","ilikeExpression","andArgs","converters","Empty","NotEmpty","PercentEmpty","PercentNotEmpty","expressionConverter","simpleFunctionResTarget","funcName","converter","Sum","Average","Min","Max","StdDev","Unique","agg_distinct","PercentUnique","e","And","Or","Not","Equal","NotEqual","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","TextContain","TextNotContain","TextStartsWith","TextEndsWith","TextEqual","TextNotEqual","TextMatch","TextNotMatch","DateEqual","DateNotEqual","DateAfter","DateOnOrAfter","DateBefore","DateOnOrBefore","DateBetween","DateNotBetween","ArrayAnyOf","ArrayAllOf","ArrayEqual","Search","DateToday","DateYesterday","DateTomorrow","DateLast7Days","DateLast30Days","DateLast90Days","DateLastMonth","DateLastYear","DateNextWeek","DateNextMonth","DateNextYear","DateCurrentCalendarWeek","DateCurrentCalendarMonth","DateCurrentCalendarYear","DatePreviousCalendarWeek","DatePreviousCalendarMonth","DatePreviousCalendarYear","DateNextCalendarWeek","DateNextCalendarMonth","DateNextCalendarYear","DateDaysFromNow","DateWeeksFromNow","DateMonthsFromNow","DateYearsFromNow","DateDaysAgo","DateWeeksAgo","DateMonthsAgo","DateYearsAgo"],"mappings":"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","file":"converter.js","sourcesContent":["import { ColumnRef,\n         ResTarget,\n         AStar,\n         RangeVar,\n         SelectStmt,\n         BoolExpr,\n         NullTest,\n         AExpr,\n         AConst,\n         StringValue,\n         AArrayExpr,\n         IntegerValue,\n         FloatValue,\n         SortBy,\n         TypeCast,\n         TypeName,\n         FuncCall,\n         WindowDef,\n         RangeSubselect,\n         WithClause,\n         CommonTableExpr,\n         RangeFunction,\n         JoinExpr,\n         Alias,\n         CoalesceExpr,\n         SubLink } from './helpers';\n\nimport { ConditionType } from '../condition';\nimport { OperatorType, calculateDateRange } from '../operator';\nimport { AggregateType } from '../aggregate';\nimport moment from 'moment-timezone';\n\nconst MAX_DISTINCT_VALUES = 1000;\nconst MAX_TILE_RECORDS = 1000;\n\nconst columnRef = (column) => {\n  return column.isSQL ? ColumnRef(column.id, column.source)\n                      : ColumnRef(column.columnName, column.source);\n};\n\nexport default class Converter {\n  toAST(query, {sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = this.targetList(query, sort, boundingBox);\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    const sortClause = sort;\n\n    const limitOffset = this.limitOffset(pageSize, pageIndex);\n\n    const limitCount = this.limitCount(pageSize);\n\n    return SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount});\n  }\n\n  toCountAST(query, {boundingBox, searchFilter}) {\n    const targetList = [ ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'total_count') ];\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toTileAST(query, {searchFilter}) {\n    let targetList = null;\n\n    if (query.ast) {\n      const sort = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n      targetList = [\n        ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__id'),\n        ResTarget(ColumnRef('__geometry'))\n      ];\n    } else {\n      const statusColumn = query.schema.repeatable ? '_record_status' : '_status';\n\n      targetList = [\n        ResTarget(ColumnRef(query.schema.repeatable ? '_child_record_id' : '_record_id'), 'id'),\n        ResTarget(ColumnRef('_geometry'), 'geometry'),\n        ResTarget(ColumnRef(statusColumn), 'status'),\n        ResTarget(TypeCast(TypeName('text'), AConst(StringValue(query.form.id))), 'form_id')\n      ];\n\n      if (query.schema.repeatable) {\n        targetList.push(ResTarget(ColumnRef('_record_id'), 'record_id'));\n        targetList.push(ResTarget(ColumnRef('_parent_id'), 'parent_id'));\n      }\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, null, searchFilter);\n\n    const limitCount = this.limitCount(MAX_TILE_RECORDS);\n\n    return SelectStmt({targetList, fromClause, whereClause, limitCount});\n  }\n\n  toHistogramAST(query, {column, bucketSize, type, sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const subLinkColumn = (col, table) => {\n      return SubLink(4, SelectStmt({\n        targetList: [ ResTarget(ColumnRef(col)) ],\n        fromClause: [ RangeVar(table) ]\n      }));\n    };\n\n    const expr = (lhs, op, rhs) => {\n      return AExpr(0, op, lhs, rhs);\n    };\n\n    const targetList = [\n      ResTarget(ColumnRef('series', 'series'), 'bucket'),\n      ResTarget(CoalesceExpr([ ColumnRef('count', 'sub'), AConst(IntegerValue(0)) ]), 'count'),\n      ResTarget(ColumnRef('min_value', 'sub'), 'min_value'),\n      ResTarget(ColumnRef('max_value', 'sub'), 'max_value'),\n      ResTarget(ColumnRef('avg_value', 'sub'), 'avg_value'),\n      ResTarget(ColumnRef('sum_value', 'sub'), 'sum_value'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(expr(ColumnRef('series', 'series'),\n                               '-',\n                               AConst(IntegerValue(1))),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_min'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(ColumnRef('series', 'series'),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_max'),\n\n      ResTarget(subLinkColumn('range', '__stats'), 'range'),\n      ResTarget(subLinkColumn('bucket_width', '__stats'), 'bucket_width')\n    ];\n\n    const withClause = this.histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter);\n\n    const seriesFunctionSublinkSelect = SelectStmt({\n      targetList: [ ResTarget(AExpr(0, '+', ColumnRef('buckets'), AConst(IntegerValue(1)))) ],\n      fromClause: [ RangeVar('__stats') ]\n    });\n\n    const seriesFunctionArgs = [\n      AConst(IntegerValue(1)),\n      SubLink(4, seriesFunctionSublinkSelect)\n    ];\n\n    const seriesFunctionCall = FuncCall('generate_series', seriesFunctionArgs);\n    const seriesFunction = RangeFunction([ [ seriesFunctionCall ] ], Alias('series'));\n\n    const bucketWidthFunctionCallArgs = [\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef('value')),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('min_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('max_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('buckets')) ], fromClause: [ RangeVar('__stats') ]}))\n    ];\n\n    const bucketsSubqueryTargetList = [\n      ResTarget(FuncCall('width_bucket', bucketWidthFunctionCallArgs), 'bucket'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(FuncCall('avg', [ ColumnRef('value') ]), 'avg_value'),\n      ResTarget(FuncCall('sum', [ ColumnRef('value') ]), 'sum_value')\n    ];\n\n    const bucketsSubqueryFromClause = [ RangeVar('__records') ];\n    const bucketsSubqueryGroupClause = [ AConst(IntegerValue(1)) ];\n    const bucketsSubquerySortClause = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n    const bucketsSubquery = SelectStmt({\n      targetList: bucketsSubqueryTargetList,\n      fromClause: bucketsSubqueryFromClause,\n      groupClause: bucketsSubqueryGroupClause,\n      sortClause: bucketsSubquerySortClause\n    });\n\n    const bucketsSubselect = RangeSubselect(bucketsSubquery, Alias('sub'));\n\n    const joinExpr = JoinExpr(1,\n                              seriesFunction,\n                              bucketsSubselect,\n                              AExpr(0, '=', ColumnRef('series', 'series'), ColumnRef('bucket', 'sub')));\n\n    return SelectStmt({targetList, fromClause: [ joinExpr ], withClause});\n  }\n\n  toDistinctValuesAST(query, options = {}) {\n    const valueColumn = query.ast ? ColumnRef(options.column.id) : columnRef(options.column);\n\n    let targetList = null;\n\n    const isLinkedRecord = options.column.element && options.column.element.isRecordLinkElement;\n\n    if (isLinkedRecord) {\n      targetList = [ ResTarget(ColumnRef('linked_record_id', '__linked_join'), 'value') ];\n    } else if (options.column.isArray && options.unnestArrays !== false) {\n      targetList = [ ResTarget(FuncCall('unnest', [ valueColumn ]), 'value') ];\n    } else if (options.column.element && options.column.element.isCalculatedElement && options.column.element.display.isDate) {\n      // SELECT pg_catalog.timezone('UTC', to_timestamp(column_name))::date\n\n      const timeZoneCast = (param) => {\n        return FuncCall([ StringValue('pg_catalog'), StringValue('timezone') ], [ AConst(StringValue('UTC')), param ]);\n      };\n\n      const toTimestamp = (param) => {\n        return FuncCall([ StringValue('pg_catalog'), StringValue('to_timestamp') ], [ param ]);\n      };\n\n      targetList = [ ResTarget(TypeCast(TypeName('date'), timeZoneCast(toTimestamp(valueColumn))), 'value') ];\n    } else {\n      targetList = [ ResTarget(valueColumn, 'value') ];\n    }\n\n    targetList.push(ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'));\n\n    if (isLinkedRecord) {\n      targetList.push(ResTarget(ColumnRef('__title', '__linked'), 'label'));\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (options.column.join) {\n      joins.push(options.column.join);\n    }\n\n    if (isLinkedRecord) {\n      joins.push({inner: false,\n                  tableName: `${query.form.id}/${options.column.element.key}`,\n                  alias: '__linked_join',\n                  sourceColumn: '_record_id',\n                  joinColumn: 'source_record_id'});\n\n      const subQuery = SelectStmt({\n        targetList: [ ResTarget(ColumnRef('_title'), '__title'),\n                      ResTarget(ColumnRef('_record_id'), '__record_id') ],\n        fromClause: [ RangeVar(`${options.column.element.form.id}`) ]\n      });\n\n      const linkedSubselect = RangeSubselect(subQuery, Alias('__linked'));\n\n      joins.push({inner: false,\n                  rarg: linkedSubselect,\n                  alias: '__linked',\n                  sourceTableName: '__linked_join',\n                  sourceColumn: 'linked_record_id',\n                  joinColumn: '__record_id'});\n    }\n\n    const fromClause = this.fromClause(query, joins, [ options.column ]);\n\n    // const whereClause = null; // options.all ? null : this.whereClause(query);\n    // TODO(zhm) need to pass the bbox and search here?\n    const whereClause = this.whereClause(query, null, null, options);\n\n    const groupClause = [ AConst(IntegerValue(1)) ];\n\n    if (isLinkedRecord) {\n      groupClause.push(AConst(IntegerValue(3)));\n    }\n\n    const sortClause = [];\n\n    if (options.by === 'frequency') {\n      sortClause.push(SortBy(AConst(IntegerValue(2)), 2, 0));\n    }\n\n    if (isLinkedRecord) {\n      sortClause.push(SortBy(AConst(IntegerValue(3)), 1, 0));\n    }\n\n    sortClause.push(SortBy(AConst(IntegerValue(1)), 1, 0));\n\n    const limitCount = this.limitCount(MAX_DISTINCT_VALUES);\n\n    return SelectStmt({targetList, fromClause, whereClause, groupClause, sortClause, limitCount});\n  }\n\n  toSummaryAST(query, columnSetting, {boundingBox, searchFilter}) {\n    if (columnSetting.summary.aggregate === AggregateType.Histogram.name) {\n      const histogramAttributes = {\n        column: columnSetting.column,\n        bucketSize: 12,\n        type: columnSetting.column.isDate ? 'date' : 'number',\n        sort: null,\n        boundingBox,\n        searchFilter\n      };\n\n      return this.toHistogramAST(query, histogramAttributes);\n    }\n\n    const targetList = this.summaryTargetList(query, columnSetting);\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (columnSetting.column.join) {\n      joins.push(columnSetting.column.join);\n    }\n\n    const fromClause = this.fromClause(query, joins, [ columnSetting.column ]);\n\n    const whereClause = this.summaryWhereClause(query, columnSetting, {boundingBox, searchFilter});\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter) {\n    let recordsTargetList = null;\n\n    if (type === 'date') {\n      const datePartArgs = [\n        AConst(StringValue('epoch')),\n        TypeCast(TypeName('date'), columnRef(column))\n      ];\n\n      recordsTargetList = [ ResTarget(FuncCall('date_part', datePartArgs), 'value') ];\n    } else {\n      recordsTargetList = [ ResTarget(TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), columnRef(column)), 'value') ];\n    }\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const recordsFromClause = this.fromClause(query, joins, [ column ]);\n\n    const recordsWhere = this.whereClause(query, boundingBox, searchFilter);\n    const recordsSelect = SelectStmt({targetList: recordsTargetList, fromClause: recordsFromClause, whereClause: recordsWhere});\n    const recordsExpr = CommonTableExpr('__records', recordsSelect);\n\n    const statsTargetList = [\n      ResTarget(AConst(IntegerValue(bucketSize)), 'buckets'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(AExpr(0, '-', FuncCall('max', [ ColumnRef('value') ]), FuncCall('min', [ ColumnRef('value') ])), 'range'),\n      ResTarget(AExpr(0, '/', AExpr(0, '-', TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('max', [ ColumnRef('value') ])),\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('min', [ ColumnRef('value') ]))),\n      AConst(FloatValue(bucketSize))), 'bucket_width')\n    ];\n\n    const statsFromClause = [ RangeVar('__records') ];\n    const statsSelect = SelectStmt({targetList: statsTargetList, fromClause: statsFromClause});\n    const statsExpr = CommonTableExpr('__stats', statsSelect);\n\n    return WithClause([ recordsExpr, statsExpr ]);\n  }\n\n  toSchemaAST(query, {schemaOnly} = {}) {\n    // wrap the query in a subquery with 1=0\n\n    const targetList = [ ResTarget(ColumnRef(AStar())) ];\n    const fromClause = [ RangeSubselect(query, Alias('wrapped')) ];\n    const whereClause = schemaOnly ? AExpr(0, '=', AConst(IntegerValue(0)), AConst(IntegerValue(1)))\n                                   : null;\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  limitOffset(pageSize, pageIndex) {\n    if (pageSize != null && pageIndex != null) {\n      return AConst(IntegerValue(+pageIndex * +pageSize));\n    }\n\n    return null;\n  }\n\n  limitCount(pageSize) {\n    if (pageSize != null) {\n      return AConst(IntegerValue(+pageSize));\n    }\n\n    return null;\n  }\n\n  targetList(query, sort, boundingBox) {\n    const list = [\n      ResTarget(ColumnRef(AStar()))\n    ];\n\n    const subJoinColumns = query.joinColumnsWithSorting;\n\n    if (subJoinColumns.indexOf(query.schema.createdByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'created_by'), 'created_by.name'));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.updatedByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'updated_by'), 'updated_by.name'));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.assignedToColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.assignedToColumn.join.alias), query.schema.assignedToColumn.id));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.projectColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', query.schema.projectColumn.join.alias), query.schema.projectColumn.id));\n    }\n\n    list.push(ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__row_number'));\n\n    return list;\n  }\n\n  fromClause(query, leftJoins = [], exactColumns) {\n    let baseQuery = null;\n\n    if (query.ast) {\n      let queryAST = query.ast;\n\n      const referencedColumns = query.referencedColumns.concat(exactColumns || []);\n\n      // If there's an `exactColumn`, pick it out specifically with a guaranteed unique alias so it can be\n      // referenced with certainty in outer queries. The following is an oversimplified example of the problem:\n      //\n      // if `id` is part of the table and needs to be references in the outer query, it must be called out specifically:\n      //\n      // INVALID:\n      //   SELECT * FROM(SELECT *, *, * FROM table) WHERE id = ...\n      //\n      // VALID:\n      //   SELECT * FROM(SELECT *, *, *, id AS __value FROM table) WHERE __value = ...\n      //\n      // Given arbitrary subqueries, we must be able to reference columns in them exactly even when there are duplicates.\n      // We can't assume they're all simple ColumnRef's either. Some ResTarget's might be entire graphs of expressions which\n      // needs to be duplicated to ensure uniqueness.\n      if (referencedColumns.length) {\n        queryAST = JSON.parse(JSON.stringify(queryAST));\n\n        for (const column of referencedColumns) {\n          Converter.duplicateResTargetWithExactName(query, queryAST.SelectStmt.targetList,\n                                                    column, column.id);\n        }\n      }\n\n      return [ RangeSubselect(queryAST, Alias('records')) ];\n    }\n\n    baseQuery = this.formQueryRangeVar(query);\n\n    const visitedTables = {};\n\n    if (leftJoins) {\n      for (const join of leftJoins) {\n        if (!visitedTables[join.alias]) {\n          visitedTables[join.alias] = join;\n\n          baseQuery = Converter.joinClause(baseQuery, join);\n        }\n      }\n    }\n\n    return [ baseQuery ];\n  }\n\n  whereClause(query, boundingBox, search, options = {}) {\n    const systemParts = [];\n    options = {...query.options || {}, ...options};\n\n    const filterNode = this.nodeForCondition(query.filter, options);\n\n    if (boundingBox) {\n      systemParts.push(this.boundingBoxFilter(query, boundingBox));\n    }\n\n    if (search && search.trim().length) {\n      systemParts.push(this.searchFilter(query, search));\n    }\n\n    systemParts.push(this.nodeForExpression(query.dateFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.statusFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.projectFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.assignmentFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.changesetFilter, options));\n\n    for (const item of query.columnSettings.columns) {\n      if (item.hasFilter) {\n        const expression = this.createExpressionForColumnFilter(item.filter, options);\n\n        if (expression) {\n          systemParts.push(expression);\n        }\n      }\n\n      if (item.search) {\n        if (item.column.isArray || item.column.isDate || item.column.isTime || item.column.isNumber) {\n          systemParts.push(AExpr(8, '~~*', TypeCast(TypeName('text'), columnRef(item.column)),\n                                          AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        } else {\n          systemParts.push(AExpr(8, '~~*', columnRef(item.column),\n                                          AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        }\n      }\n\n      if (item.expression.isValid) {\n        systemParts.push(this.nodeForExpression(item.expression, options));\n      }\n\n      if (item.range.isValid) {\n        systemParts.push(this.nodeForExpression(item.range, options));\n      }\n    }\n\n    if (options.expressions) {\n      systemParts.push.apply(systemParts, options.expressions);\n    }\n\n    const expressions = systemParts.filter(o => o != null);\n\n    if (filterNode && expressions.length) {\n      return BoolExpr(0, [ filterNode, ...expressions ]);\n    } else if (expressions.length) {\n      return BoolExpr(0, [ ...expressions ]);\n    }\n\n    return filterNode;\n  }\n\n  static joinClause(baseQuery, {inner, tableName, alias, sourceColumn, joinColumn, sourceTableName, rarg}) {\n    return JoinExpr(inner ? 0 : 1,\n                    baseQuery,\n                    rarg || RangeVar(tableName, Alias(alias)),\n                    AExpr(0, '=', ColumnRef(sourceColumn, sourceTableName || 'records'), ColumnRef(joinColumn, alias)));\n  }\n\n  static duplicateResTargetWithExactName(query, targetList, column, exactName) {\n    let resTarget = Converter.findResTarget(query, column);\n\n    // If a column is referenced more than once don't add it again\n    for (const existing of targetList) {\n      if (existing.ResTarget.name === exactName) {\n        return;\n      }\n    }\n\n    // If we found a matching restarget, copy the entire node and give it a new name\n    if (resTarget) {\n      resTarget = JSON.parse(JSON.stringify(resTarget));\n      resTarget.ResTarget.name = exactName;\n    } else {\n      resTarget = ResTarget(ColumnRef(column.columnName, column.source), exactName);\n    }\n\n    targetList.push(resTarget);\n  }\n\n  static findResTarget(query, column) {\n    // UNION's don't have targetList's\n    if (!query.ast.SelectStmt.targetList) {\n      return null;\n    }\n\n    // look for any A_Star nodes, a SELECT * modifies how we process the res targets. If there's\n    // an A_Star node in the targetList, it means that we can't just get the column by index because\n    // the * might expand to columns that cause the indexes to be different.\n    const hasStar = query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget &&\n             target.ResTarget.val &&\n             target.ResTarget.val.ColumnRef &&\n             target.ResTarget.val.ColumnRef.fields &&\n             target.ResTarget.val.ColumnRef.fields[0] &&\n             target.ResTarget.val.ColumnRef.fields[0].A_Star;\n    });\n\n    // the simple case is when there is no * in the query\n    if (!hasStar && query.ast.SelectStmt.targetList.length === query.schema.columns.length) {\n      return query.ast.SelectStmt.targetList[column.index];\n    }\n\n    // Find the ResTarget node by name, or else return null, which means the column\n    // must be coming from a * node and we can just use a simple ResTarget + ColumnRef\n    return query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget.name === column.name;\n    });\n  }\n\n  formQueryRangeVar(query) {\n    if (query.repeatableKey) {\n      return RangeVar(query.form.id + '/' + query.repeatableKey + '/_full', Alias('records'));\n    }\n\n    return RangeVar(query.form.id + '/_full', Alias('records'));\n  }\n\n  createExpressionForColumnFilter(filter, options) {\n    let expression = null;\n\n    if (filter === options.except) {\n      return null;\n    }\n\n    if (filter.hasValues) {\n      let hasNull = false;\n      const values = [];\n\n      filter.value.forEach(v => {\n        if (v != null) {\n          values.push(v);\n        } else {\n          hasNull = true;\n        }\n      });\n\n      if (values.length) {\n        if (filter.column.isArray) {\n          expression = this.AnyOf(filter.column, values);\n        } else if (filter.column.element && filter.column.element.isCalculatedElement && filter.column.element.display.isDate) {\n          expression = this.In(filter.column, values.map((value) => {\n            return new Date(value).getTime() / 1000;\n          }));\n        } else {\n          expression = this.In(filter.column, values);\n        }\n\n        if (hasNull) {\n          expression = BoolExpr(1, [ NullTest(0, columnRef(filter.column)), expression ]);\n        }\n      } else if (hasNull) {\n        expression = NullTest(0, columnRef(filter.column));\n      }\n    } else if (filter.isEmptySet) {\n      // add 1 = 0 clause to return 0 rows\n      expression = AExpr(0, '=', AConst(IntegerValue(1)), AConst(IntegerValue(0)));\n    }\n\n    return expression;\n  }\n\n  boundingBoxFilter(query, boundingBox) {\n    const [xmin, ymin, xmax, ymax] = boundingBox;\n\n    const columnName = query.ast ? '__geometry' : '_geometry';\n\n    // if the east value is less than the west value, the bbox spans the 180 meridian.\n    // Split the box into 2 separate boxes on either side of the meridian and use\n    // an OR statement in the where clause so records on either side of the meridian\n    // will be returned.\n    if (xmax < xmin) {\n      const box1 = [ xmin, ymin, 180, ymax ];\n      const box2 = [ -180, ymin, xmax, ymax ];\n\n      const boxes = [ this.geometryQuery(columnName, box1),\n                      this.geometryQuery(columnName, box2) ];\n\n      return BoolExpr(1, boxes);\n    }\n\n    return this.geometryQuery(columnName, boundingBox);\n  }\n\n  geometryQuery(columnName, boundingBox) {\n    const args = [\n      AConst(FloatValue(boundingBox[0])),\n      AConst(FloatValue(boundingBox[1])),\n      AConst(FloatValue(boundingBox[2])),\n      AConst(FloatValue(boundingBox[3])),\n      AConst(IntegerValue(4326))\n    ];\n\n    const rhs = FuncCall('st_makeenvelope', args);\n\n    return AExpr(0, '&&', ColumnRef(columnName), rhs);\n  }\n\n  escapeLikePercent(value) {\n    return value.replace(/\\%/g, '\\\\%').replace(/_/g, '\\\\_%');\n  }\n\n  searchFilter(query, search) {\n    /*\n       Search takes the general form:\n\n       SELECT ...\n       FROM ...\n       WHERE\n         _record_index @@ to_tsquery('english', '''bacon'':*'::tsquery::text) AND\n         _record_index_text ILIKE '%bacon%'\n\n       NB: The awkward cast through a text type is to properly escape raw user input as a tsquery.\n\n       For example:\n         to_tsquery('Nor:*') vs 'Nor:*'::tsquery\n\n       Also, the ILIKE handles further reduces the resultset to exact matches which is what Fulcrum\n       users more often expect. The general idea is to use the FTS index to massively reduce the result\n       set before applying the much slower ILIKE operation. So, we can reduce the result very quickly\n       with the tsvector index first, and then only run the ILIKE on what's left.\n    */\n\n    search = search.trim();\n\n    // if it's a fully custom SQL statement, use a simpler form with no index\n    if (query.ast) {\n      return AExpr(8, '~~*', TypeCast(TypeName('text'), ColumnRef('records')),\n                   AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n    }\n\n    const toTsQuery = (dictionary, term) => {\n      const args = [ AConst(StringValue(dictionary)), AConst(StringValue(\"'\" + term + \"':*\")) ];\n\n      return FuncCall('to_tsquery', args);\n    };\n\n    const makeTsQueryCall = (term) => {\n      return toTsQuery('english', term.toLowerCase().replace(/'/g, \"''\"));\n    };\n\n    const terms = search.split(' ').filter(s => s.trim().length);\n\n    let term = terms.shift();\n\n    let tsQueries = makeTsQueryCall(term);\n\n    while (terms.length) {\n      term = terms.shift();\n      tsQueries = AExpr(0, '&&', tsQueries, makeTsQueryCall(term));\n    }\n\n    const ftsExpression = AExpr(0, '@@', ColumnRef('_record_index'), tsQueries);\n\n    const ilikeExpression = AExpr(8, '~~*', ColumnRef('_record_index_text'),\n                                  AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n\n    const andArgs = [\n      ftsExpression,\n      ilikeExpression\n    ];\n\n    return BoolExpr(0, andArgs);\n  }\n\n  summaryWhereClause(query, columnSetting, {boundingBox, searchFilter}) {\n    const expressions = [];\n\n    const converters = {\n      [AggregateType.Empty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.NotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentEmpty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentNotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      }\n    };\n\n    const expressionConverter = converters[columnSetting.summary.aggregate];\n\n    if (expressionConverter) {\n      expressions.push(expressionConverter());\n    }\n\n    return this.whereClause(query, boundingBox, searchFilter, {expressions});\n  }\n\n  summaryTargetList(query, columnSetting) {\n    const simpleFunctionResTarget = (funcName, param) => {\n      return () => {\n        return [ ResTarget(FuncCall(funcName, [ param || columnRef(columnSetting.column) ]), 'value') ];\n      };\n    };\n\n    const converter = {\n      [AggregateType.Sum.name]: simpleFunctionResTarget('sum'),\n      [AggregateType.Average.name]: simpleFunctionResTarget('avg'),\n      [AggregateType.Min.name]: simpleFunctionResTarget('min'),\n      [AggregateType.Max.name]: simpleFunctionResTarget('max'),\n      [AggregateType.StdDev.name]: simpleFunctionResTarget('stddev'),\n      [AggregateType.Histogram.name]: simpleFunctionResTarget('count'),\n      [AggregateType.Empty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.NotEmpty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.Unique.name]: () => {\n        return [ ResTarget(FuncCall('count', [ columnRef(columnSetting.column) ], {agg_distinct: true}), 'value') ];\n      },\n      [AggregateType.PercentEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentNotEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentUnique.name]: simpleFunctionResTarget('count')\n    };\n\n    return converter[columnSetting.summary.aggregate]();\n  }\n\n  nodeForExpressions(expressions, options) {\n    return expressions.map(e => this.nodeForExpression(e, options))\n                      .filter(e => e);\n  }\n\n  nodeForCondition(condition, options) {\n    const converter = {\n      [ConditionType.And]: this.AndConverter,\n      [ConditionType.Or]: this.OrConverter,\n      [ConditionType.Not]: this.NotConverter\n    };\n\n    return converter[condition.type](condition, options);\n  }\n\n  nodeForExpression(expression, options) {\n    if (expression.expressions) {\n      return this.nodeForCondition(expression, options);\n    }\n\n    if (expression === options.except) {\n      return null;\n    }\n\n    const converter = {\n      [OperatorType.Empty.name]: this.EmptyConverter,\n      [OperatorType.NotEmpty.name]: this.NotEmptyConverter,\n      [OperatorType.Equal.name]: this.EqualConverter,\n      [OperatorType.NotEqual.name]: this.NotEqualConverter,\n      [OperatorType.GreaterThan.name]: this.GreaterThanConverter,\n      [OperatorType.GreaterThanOrEqual.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.LessThan.name]: this.LessThanConverter,\n      [OperatorType.LessThanOrEqual.name]: this.LessThanOrEqualConverter,\n      [OperatorType.Between.name]: this.BetweenConverter,\n      [OperatorType.NotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.In.name]: this.InConverter,\n      [OperatorType.NotIn.name]: this.NotInConverter,\n      [OperatorType.TextContain.name]: this.TextContainConverter,\n      [OperatorType.TextNotContain.name]: this.TextNotContainConverter,\n      [OperatorType.TextStartsWith.name]: this.TextStartsWithConverter,\n      [OperatorType.TextEndsWith.name]: this.TextEndsWithConverter,\n      [OperatorType.TextEqual.name]: this.TextEqualConverter,\n      [OperatorType.TextNotEqual.name]: this.TextNotEqualConverter,\n      [OperatorType.TextMatch.name]: this.TextMatchConverter,\n      [OperatorType.TextNotMatch.name]: this.TextNotMatchConverter,\n      [OperatorType.DateEqual.name]: this.EqualConverter,\n      [OperatorType.DateNotEqual.name]: this.NotEqualConverter,\n      [OperatorType.DateAfter.name]: this.GreaterThanConverter,\n      [OperatorType.DateOnOrAfter.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.DateBefore.name]: this.LessThanConverter,\n      [OperatorType.DateOnOrBefore.name]: this.LessThanOrEqualConverter,\n      [OperatorType.DateBetween.name]: this.BetweenConverter,\n      [OperatorType.DateNotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.ArrayAnyOf.name]: this.ArrayAnyOfConverter,\n      [OperatorType.ArrayAllOf.name]: this.ArrayAllOfConverter,\n      [OperatorType.ArrayEqual.name]: this.ArrayEqualConverter,\n      [OperatorType.Search.name]: this.SearchConverter,\n      [OperatorType.DateToday.name]: this.DynamicDateConverter,\n      [OperatorType.DateYesterday.name]: this.DynamicDateConverter,\n      [OperatorType.DateTomorrow.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast7Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast30Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast90Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsAgo.name]: this.DynamicDateConverter\n    };\n\n    if (!expression.isValid) {\n      return null;\n    }\n\n    return converter[expression.operator](expression, options);\n  }\n\n  BooleanConverter = (type, condition, options) => {\n    const args = this.nodeForExpressions(condition.expressions, options);\n\n    if (args && args.length) {\n      return BoolExpr(type, args);\n    }\n\n    return null;\n  }\n\n  AndConverter = (condition, options) => {\n    return this.BooleanConverter(0, condition, options);\n  }\n\n  OrConverter = (condition, options) => {\n    return this.BooleanConverter(1, condition, options);\n  }\n\n  NotConverter = (condition, options) => {\n    if (condition.expressions.length > 1) {\n      return BoolExpr(2, [ this.BooleanConverter(0, condition, options) ]);\n    }\n\n    return this.BooleanConverter(2, condition, options);\n  }\n\n  NotEmptyConverter = (expression) => {\n    return NullTest(1, columnRef(expression.column));\n  }\n\n  EmptyConverter = (expression) => {\n    return NullTest(0, columnRef(expression.column));\n  }\n\n  EqualConverter = (expression) => {\n    return this.BinaryConverter(0, '=', expression);\n  }\n\n  NotEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<>', expression);\n  }\n\n  GreaterThanConverter = (expression) => {\n    return this.BinaryConverter(0, '>', expression);\n  }\n\n  GreaterThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '>=', expression);\n  }\n\n  LessThanConverter = (expression) => {\n    return this.BinaryConverter(0, '<', expression);\n  }\n\n  LessThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<=', expression);\n  }\n\n  BetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options, expression.column.isDateTime).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options, expression.column.isDateTime).endOf('day'));\n    }\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options, expression.column.isDateTime).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options, expression.column.isDateTime).endOf('day'));\n    }\n\n    return this.NotBetween(expression.column, value1, value2);\n  }\n\n  InConverter = (expression) => {\n    return this.In(expression.column, expression.arrayValue);\n  }\n\n  NotInConverter = (expression) => {\n    return this.NotIn(expression.column, expression.arrayValue);\n  }\n\n  BinaryConverter = (kind, operator, expression) => {\n    return AExpr(kind, operator, columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  FieldConverter = (expression) => {\n    return ColumnRef(expression.name);\n  }\n\n  ConstantConverter = (expression) => {\n    return this.ConstValue(expression.column, expression.scalarValue);\n  }\n\n  TextEqualConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextNotEqualConverter = (expression) => {\n    return AExpr(8, '!~~*', this.ConvertToText(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextContainConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextNotContainConverter = (expression) => {\n    return AExpr(8, '!~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextStartsWithConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue(this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextEndsWithConverter = (expression) => {\n    return AExpr(8, '~~*', this.ConvertToText(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue))));\n  }\n\n  TextMatchConverter = (expression) => {\n    if (this.IsValidRegExp(expression.scalarValue)) {\n      return AExpr(0, '~*', this.ConvertToText(expression.column),\n                   AConst(StringValue(expression.scalarValue)));\n    }\n\n    return null;\n  }\n\n  TextNotMatchConverter = (expression) => {\n    if (this.IsValidRegExp(expression.scalarValue)) {\n      return AExpr(0, '!~*', this.ConvertToText(expression.column),\n                   AConst(StringValue(expression.scalarValue)));\n    }\n    return null;\n  }\n\n  ArrayAnyOfConverter = (expression) => {\n    return this.AnyOf(expression.column, expression.arrayValue);\n  }\n\n  ArrayAllOfConverter = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    return AExpr(0, '@>', columnRef(expression.column),\n                 values);\n  }\n\n  ArrayEqualConverter = (expression) => {\n    const values = AArrayExpr(expression.arrayValue.map(v => this.ConstValue(expression.column, v)));\n\n    const a = AExpr(0, '<@', columnRef(expression.column),\n                    values);\n\n    const b = AExpr(0, '@>', columnRef(expression.column),\n                    values);\n\n    return BoolExpr(0, [ a, b ]);\n  }\n\n  SearchConverter = (expression) => {\n    const rhs = FuncCall('to_tsquery', [ this.ConstValue(expression.column, expression.scalarValue) ]);\n\n    return AExpr(0, '@@', columnRef(expression.column),\n                 rhs);\n  }\n\n  DynamicDateConverter = (expression, options) => {\n    // Let the caller specify the timezone to be used for dynamic date calculations. This\n    // makes sure when the browser calculates a dynamic range, the server would calculate\n    // the same range. So 'Today' is midnight to midnight in the user's local time. It would\n    // be much less useful and confusing if we forced \"Today\" to always be London's today.\n    const now = this.GetDate(null, options, true);\n\n    const range = calculateDateRange(expression.operator, expression.value, now);\n\n    const value1 = this.ConvertDateValue(range[0]);\n    const value2 = this.ConvertDateValue(range[1]);\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetween = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(11, 'NOT BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '<', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '>', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  AnyOf = (column, values) => {\n    const arrayValues = AArrayExpr(values.map(v => this.ConstValue(column, v)));\n\n    return AExpr(0, '&&', columnRef(column), arrayValues);\n  }\n\n  In = (column, values) => {\n    let hasNull = false;\n    const inValues = [];\n\n    values.forEach(v => {\n      if (v != null) {\n        inValues.push(v);\n      } else {\n        hasNull = true;\n      }\n    });\n\n    let expression = null;\n\n    if (inValues.length) {\n      expression = AExpr(6, '=', columnRef(column), inValues.map(v => this.ConstValue(column, v)));\n\n      if (hasNull) {\n        expression = BoolExpr(1, [ NullTest(0, columnRef(column)), expression ]);\n      }\n    } else if (hasNull) {\n      expression = NullTest(0, columnRef(column));\n    }\n\n    return expression;\n  }\n\n  NotIn = (column, values) => {\n    let hasNull = false;\n    const inValues = [];\n\n    values.forEach(v => {\n      if (v != null) {\n        inValues.push(v);\n      } else {\n        hasNull = true;\n      }\n    });\n\n    let expression = null;\n\n    if (inValues.length) {\n      expression = AExpr(6, '<>', columnRef(column), inValues.map(v => this.ConstValue(column, v)));\n\n      if (hasNull) {\n        expression = BoolExpr(1, [ NullTest(1, columnRef(column)), expression ]);\n      }\n    } else if (hasNull) {\n      expression = NullTest(1, columnRef(column));\n    }\n\n    return expression;\n  }\n\n  Between = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(10, 'BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '>=', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '<=', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  ConstValue = (column, value) => {\n    if (value == null) {\n      return null;\n    }\n\n    if (column.isInteger) {\n      return AConst(IntegerValue(value));\n    }\n\n    if (column.isNumber) {\n      return AConst(FloatValue(value));\n    }\n\n    return AConst(StringValue(value));\n  }\n\n  GetDate = (date, options, isDateTime) => {\n    date = date || new Date().toISOString();\n\n    if (!isDateTime) {\n      // the `date` value comes in as the string \"2017-11-12 23:59:59\". We want it to be interpreted as UTC for the\n      // purposes of the SQL query generation. So we convert the local timestamp to a UTC one. We don't care if it's\n      // in a different timezone, we just need to make sure the date component of the timestamp is identical to the\n      // value stored in the date field. We are effectively disregarding the time component of the timestamp.\n      return moment(date.replace(' ', 'T') + 'Z').utc();\n    }\n\n    const timeZone = (options && options.timeZone) || moment.tz.guess();\n\n    return moment(date).tz(timeZone);\n  }\n\n  ConvertDateValue = (date) => {\n    if (date) {\n      return date.clone().toISOString();\n    }\n    return null;\n  }\n\n  ConvertToText = (column) => {\n    if (column.isDate || column.isTime || column.isArray) {\n      return TypeCast(TypeName('text'), columnRef(column));\n    }\n\n    return columnRef(column);\n  }\n\n  IsValidRegExp = (string) => {\n    try {\n      return !!(new RegExp(string));\n    } catch (ex) {\n      return false;\n    }\n  }\n}\n"]}