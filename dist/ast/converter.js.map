{"version":3,"sources":["../../src/ast/converter.js"],"names":["MAX_DISTINCT_VALUES","columnRef","column","isSQL","id","source","columnName","Converter","BooleanConverter","type","condition","options","args","nodeForExpressions","expressions","length","AndConverter","OrConverter","NotConverter","NotEmptyConverter","expression","EmptyConverter","EqualConverter","BinaryConverter","NotEqualConverter","GreaterThanConverter","GreaterThanOrEqualConverter","LessThanConverter","LessThanOrEqualConverter","BetweenConverter","value1","value2","isDateOperator","ConvertDateValue","GetDate","startOf","endOf","Between","NotBetweenConverter","NotBetween","InConverter","In","value","NotInConverter","values","map","ConstValue","v","kind","operator","scalarValue","FieldConverter","name","ConstantConverter","TextEqualConverter","TextNotEqualConverter","TextContainConverter","escapeLikePercent","TextNotContainConverter","TextStartsWithConverter","TextEndsWithConverter","TextMatchConverter","TextNotMatchConverter","ArrayAnyOfConverter","AnyOf","ArrayAllOfConverter","ArrayEqualConverter","a","b","SearchConverter","rhs","DynamicDateConverter","now","range","arrayValues","isInteger","isNumber","date","timeZone","tz","guess","Date","clone","toISOString","toAST","query","sort","pageSize","pageIndex","boundingBox","searchFilter","targetList","joins","joinColumnsWithSorting","o","join","fromClause","whereClause","sortClause","limitOffset","limitCount","toCountAST","joinColumns","toTileAST","ast","over","form","toHistogramAST","bucketSize","subLinkColumn","col","table","expr","lhs","op","withClause","histogramWithClause","seriesFunctionSublinkSelect","seriesFunctionArgs","seriesFunctionCall","seriesFunction","bucketWidthFunctionCallArgs","bucketsSubqueryTargetList","bucketsSubqueryFromClause","bucketsSubqueryGroupClause","bucketsSubquerySortClause","bucketsSubquery","groupClause","bucketsSubselect","joinExpr","toDistinctValuesAST","valueColumn","isLinkedRecord","element","isRecordLinkElement","isArray","push","inner","tableName","key","alias","sourceColumn","joinColumn","sourceTableName","by","limitClause","toSummaryAST","columnSetting","summary","aggregate","Histogram","histogramAttributes","isDate","summaryTargetList","summaryWhereClause","recordsTargetList","datePartArgs","recordsFromClause","recordsWhere","recordsSelect","recordsExpr","statsTargetList","statsFromClause","statsSelect","statsExpr","toSchemaAST","schemaOnly","list","subJoinColumns","indexOf","schema","createdByColumn","updatedByColumn","assignedToColumn","projectColumn","leftJoins","exactColumns","baseQuery","queryAST","referencedColumns","concat","JSON","parse","stringify","duplicateResTargetWithExactName","SelectStmt","formQueryRangeVar","visitedTables","joinClause","search","systemParts","filterNode","nodeForCondition","filter","boundingBoxFilter","trim","nodeForExpression","dateFilter","createExpressionForColumnFilter","statusFilter","projectFilter","assignmentFilter","columnSettings","columns","item","hasFilter","isValid","apply","exactName","resTarget","findResTarget","existing","ResTarget","hasStar","find","target","val","ColumnRef","fields","A_Star","index","repeatableKey","except","hasValues","hasNull","forEach","isEmptySet","replace","toTsQuery","dictionary","term","makeTsQueryCall","toLowerCase","terms","split","s","shift","tsQueries","ftsExpression","ilikeExpression","andArgs","converters","Empty","NotEmpty","PercentEmpty","PercentNotEmpty","expressionConverter","simpleFunctionResTarget","funcName","param","converter","Sum","Average","Min","Max","StdDev","Unique","agg_distinct","PercentUnique","e","And","Or","Not","Equal","NotEqual","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","NotIn","TextContain","TextNotContain","TextStartsWith","TextEndsWith","TextEqual","TextNotEqual","TextMatch","TextNotMatch","DateEqual","DateNotEqual","DateAfter","DateOnOrAfter","DateBefore","DateOnOrBefore","DateBetween","DateNotBetween","ArrayAnyOf","ArrayAllOf","ArrayEqual","Search","DateToday","DateYesterday","DateTomorrow","DateLast7Days","DateLast30Days","DateLast90Days","DateLastMonth","DateLastYear","DateNextWeek","DateNextMonth","DateNextYear","DateCurrentCalendarWeek","DateCurrentCalendarMonth","DateCurrentCalendarYear","DatePreviousCalendarWeek","DatePreviousCalendarMonth","DatePreviousCalendarYear","DateNextCalendarWeek","DateNextCalendarMonth","DateNextCalendarYear","DateDaysFromNow","DateWeeksFromNow","DateMonthsFromNow","DateYearsFromNow","DateDaysAgo","DateWeeksAgo","DateMonthsAgo","DateYearsAgo"],"mappings":"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","file":"converter.js","sourcesContent":["import { ColumnRef,\n         ResTarget,\n         AStar,\n         RangeVar,\n         SelectStmt,\n         BoolExpr,\n         NullTest,\n         AExpr,\n         AConst,\n         StringValue,\n         AArrayExpr,\n         IntegerValue,\n         FloatValue,\n         SortBy,\n         TypeCast,\n         TypeName,\n         FuncCall,\n         WindowDef,\n         RangeSubselect,\n         WithClause,\n         CommonTableExpr,\n         RangeFunction,\n         JoinExpr,\n         Alias,\n         CoalesceExpr,\n         SubLink } from './helpers';\n\nimport { ConditionType } from '../condition';\nimport { OperatorType, calculateDateRange } from '../operator';\nimport { AggregateType } from '../aggregate';\nimport moment from 'moment-timezone';\n\nconst MAX_DISTINCT_VALUES = 1000;\n\nconst columnRef = (column) => {\n  return column.isSQL ? ColumnRef(column.id, column.source)\n                      : ColumnRef(column.columnName, column.source);\n};\n\nexport default class Converter {\n  toAST(query, {sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = this.targetList(query, sort, boundingBox);\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    const sortClause = sort;\n\n    const limitOffset = this.limitOffset(pageSize, pageIndex);\n\n    const limitCount = this.limitCount(pageSize);\n\n    return SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount});\n  }\n\n  toCountAST(query, {boundingBox, searchFilter}) {\n    const targetList = [ ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'total_count') ];\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toTileAST(query, {searchFilter}) {\n    let targetList = null;\n\n    if (query.ast) {\n      const sort = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n      targetList = [\n        ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__id'),\n        ResTarget(ColumnRef('__geometry'))\n      ];\n    } else {\n      targetList = [\n        ResTarget(ColumnRef('_record_id'), 'id'),\n        ResTarget(ColumnRef('_geometry'), 'geometry'),\n        ResTarget(ColumnRef('_status'), 'status'),\n        ResTarget(TypeCast(TypeName('text'), AConst(StringValue(query.form.id))), 'form_id')\n      ];\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, null, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toHistogramAST(query, {column, bucketSize, type, sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const subLinkColumn = (col, table) => {\n      return SubLink(4, SelectStmt({\n        targetList: [ ResTarget(ColumnRef(col)) ],\n        fromClause: [ RangeVar(table) ]\n      }));\n    };\n\n    const expr = (lhs, op, rhs) => {\n      return AExpr(0, op, lhs, rhs);\n    };\n\n    const targetList = [\n      ResTarget(ColumnRef('series', 'series'), 'bucket'),\n      ResTarget(CoalesceExpr([ ColumnRef('count', 'sub'), AConst(IntegerValue(0)) ]), 'count'),\n      ResTarget(ColumnRef('min_value', 'sub'), 'min_value'),\n      ResTarget(ColumnRef('max_value', 'sub'), 'max_value'),\n      ResTarget(ColumnRef('avg_value', 'sub'), 'avg_value'),\n      ResTarget(ColumnRef('sum_value', 'sub'), 'sum_value'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(expr(ColumnRef('series', 'series'),\n                               '-',\n                               AConst(IntegerValue(1))),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_min'),\n\n      ResTarget(expr(subLinkColumn('min_value', '__stats'),\n                     '+',\n                     expr(ColumnRef('series', 'series'),\n                          '*',\n                          subLinkColumn('bucket_width', '__stats'))), 'bucket_max'),\n\n      ResTarget(subLinkColumn('range', '__stats'), 'range'),\n      ResTarget(subLinkColumn('bucket_width', '__stats'), 'bucket_width')\n    ];\n\n    const withClause = this.histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter);\n\n    const seriesFunctionSublinkSelect = SelectStmt({\n      targetList: [ ResTarget(AExpr(0, '+', ColumnRef('buckets'), AConst(IntegerValue(1)))) ],\n      fromClause: [ RangeVar('__stats') ]\n    });\n\n    const seriesFunctionArgs = [\n      AConst(IntegerValue(1)),\n      SubLink(4, seriesFunctionSublinkSelect)\n    ];\n\n    const seriesFunctionCall = FuncCall('generate_series', seriesFunctionArgs);\n    const seriesFunction = RangeFunction([ [ seriesFunctionCall ] ], Alias('series'));\n\n    const bucketWidthFunctionCallArgs = [\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef('value')),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('min_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('max_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('buckets')) ], fromClause: [ RangeVar('__stats') ]}))\n    ];\n\n    const bucketsSubqueryTargetList = [\n      ResTarget(FuncCall('width_bucket', bucketWidthFunctionCallArgs), 'bucket'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(FuncCall('avg', [ ColumnRef('value') ]), 'avg_value'),\n      ResTarget(FuncCall('sum', [ ColumnRef('value') ]), 'sum_value')\n    ];\n\n    const bucketsSubqueryFromClause = [ RangeVar('__records') ];\n    const bucketsSubqueryGroupClause = [ AConst(IntegerValue(1)) ];\n    const bucketsSubquerySortClause = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n    const bucketsSubquery = SelectStmt({\n      targetList: bucketsSubqueryTargetList,\n      fromClause: bucketsSubqueryFromClause,\n      groupClause: bucketsSubqueryGroupClause,\n      sortClause: bucketsSubquerySortClause\n    });\n\n    const bucketsSubselect = RangeSubselect(bucketsSubquery, Alias('sub'));\n\n    const joinExpr = JoinExpr(1,\n                              seriesFunction,\n                              bucketsSubselect,\n                              AExpr(0, '=', ColumnRef('series', 'series'), ColumnRef('bucket', 'sub')));\n\n    return SelectStmt({targetList, fromClause: [ joinExpr ], withClause});\n  }\n\n  toDistinctValuesAST(query, options = {}) {\n    const valueColumn = query.ast ? ColumnRef(options.column.id) : columnRef(options.column);\n\n    let targetList = null;\n\n    const isLinkedRecord = options.column.element && options.column.element.isRecordLinkElement;\n\n    if (isLinkedRecord) {\n      targetList = [ ResTarget(ColumnRef('linked_record_id', '__join'), 'value') ];\n    } else if (options.column.isArray) {\n      targetList = [ ResTarget(FuncCall('unnest', [ valueColumn ]), 'value') ];\n    } else {\n      targetList = [ ResTarget(valueColumn, 'value') ];\n    }\n\n    targetList.push(ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'));\n\n    if (isLinkedRecord) {\n      targetList.push(ResTarget(ColumnRef('_title', '__linked'), 'label'));\n    }\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (options.column.join) {\n      joins.push(options.column.join);\n    }\n\n    if (isLinkedRecord) {\n      joins.push({inner: false,\n                  tableName: `${query.form.id}/${options.column.element.key}`,\n                  alias: '__join',\n                  sourceColumn: '_record_id',\n                  joinColumn: 'source_record_id'});\n\n      joins.push({inner: false,\n                  tableName: `${options.column.element.form.id}`,\n                  alias: '__linked',\n                  sourceTableName: '__join',\n                  sourceColumn: 'linked_record_id',\n                  joinColumn: '_record_id'});\n    }\n\n    const fromClause = this.fromClause(query, joins, [ options.column ]);\n\n    // const whereClause = null; // options.all ? null : this.whereClause(query);\n    // TODO(zhm) need to pass the bbox and search here?\n    const whereClause = this.whereClause(query, null, null, options);\n\n    const groupClause = [ AConst(IntegerValue(1)) ];\n\n    if (isLinkedRecord) {\n      groupClause.push(AConst(IntegerValue(3)));\n    }\n\n    const sortClause = [];\n\n    if (options.by === 'frequency') {\n      sortClause.push(SortBy(AConst(IntegerValue(2)), 2, 0));\n    }\n\n    if (isLinkedRecord) {\n      sortClause.push(SortBy(AConst(IntegerValue(3)), 1, 0));\n    }\n\n    sortClause.push(SortBy(AConst(IntegerValue(1)), 1, 0));\n\n    const limitClause = AConst(IntegerValue(MAX_DISTINCT_VALUES));\n\n    return SelectStmt({targetList, fromClause, whereClause, groupClause, sortClause, limitClause});\n  }\n\n  toSummaryAST(query, columnSetting, {boundingBox, searchFilter}) {\n    if (columnSetting.summary.aggregate === AggregateType.Histogram.name) {\n      const histogramAttributes = {\n        column: columnSetting.column,\n        bucketSize: 12,\n        type: columnSetting.column.isDate ? 'date' : 'number',\n        sort: null,\n        boundingBox,\n        searchFilter\n      };\n\n      return this.toHistogramAST(query, histogramAttributes);\n    }\n\n    const targetList = this.summaryTargetList(query, columnSetting);\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    if (columnSetting.column.join) {\n      joins.push(columnSetting.column.join);\n    }\n\n    const fromClause = this.fromClause(query, joins, [ columnSetting.column ]);\n\n    const whereClause = this.summaryWhereClause(query, columnSetting, {boundingBox, searchFilter});\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  histogramWithClause(column, bucketSize, type, query, boundingBox, searchFilter) {\n    let recordsTargetList = null;\n\n    if (type === 'date') {\n      const datePartArgs = [\n        AConst(StringValue('epoch')),\n        TypeCast(TypeName('date'), columnRef(column))\n      ];\n\n      recordsTargetList = [ ResTarget(FuncCall('date_part', datePartArgs), 'value') ];\n    } else {\n      recordsTargetList = [ ResTarget(TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), columnRef(column)), 'value') ];\n    }\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const recordsFromClause = this.fromClause(query, joins, [ column ]);\n\n    const recordsWhere = this.whereClause(query, boundingBox, searchFilter);\n    const recordsSelect = SelectStmt({targetList: recordsTargetList, fromClause: recordsFromClause, whereClause: recordsWhere});\n    const recordsExpr = CommonTableExpr('__records', recordsSelect);\n\n    const statsTargetList = [\n      ResTarget(AConst(IntegerValue(bucketSize)), 'buckets'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(AExpr(0, '-', FuncCall('max', [ ColumnRef('value') ]), FuncCall('min', [ ColumnRef('value') ])), 'range'),\n      ResTarget(AExpr(0, '/', AExpr(0, '-', TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('max', [ ColumnRef('value') ])),\n                                            TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), FuncCall('min', [ ColumnRef('value') ]))),\n                              AConst(FloatValue(bucketSize))), 'bucket_width')\n    ];\n\n    const statsFromClause = [ RangeVar('__records') ];\n    const statsSelect = SelectStmt({targetList: statsTargetList, fromClause: statsFromClause});\n    const statsExpr = CommonTableExpr('__stats', statsSelect);\n\n    return WithClause([ recordsExpr, statsExpr ]);\n  }\n\n  toSchemaAST(query, {schemaOnly} = {}) {\n    // wrap the query in a subquery with 1=0\n\n    const targetList = [ ResTarget(ColumnRef(AStar())) ];\n    const fromClause = [ RangeSubselect(query, Alias('wrapped')) ];\n    const whereClause = schemaOnly ? AExpr(0, '=', AConst(IntegerValue(0)), AConst(IntegerValue(1)))\n                                   : null;\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  limitOffset(pageSize, pageIndex) {\n    if (pageSize != null && pageIndex != null) {\n      return AConst(IntegerValue(+pageIndex * +pageSize));\n    }\n\n    return null;\n  }\n\n  limitCount(pageSize) {\n    if (pageSize != null) {\n      return AConst(IntegerValue(+pageSize));\n    }\n\n    return null;\n  }\n\n  targetList(query, sort, boundingBox) {\n    const list = [\n      ResTarget(ColumnRef(AStar()))\n    ];\n\n    const subJoinColumns = query.joinColumnsWithSorting;\n\n    if (subJoinColumns.indexOf(query.schema.createdByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'created_by'), 'created_by.name'));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.updatedByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'updated_by'), 'updated_by.name'));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.assignedToColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'assigned_to'), 'assigned_to.name'));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.projectColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'project'), 'project.name'));\n    }\n\n    list.push(ResTarget(FuncCall('row_number', null, {over: WindowDef(sort, 530)}), '__row_number'));\n\n    return list;\n  }\n\n  fromClause(query, leftJoins = [], exactColumns) {\n    let baseQuery = null;\n\n    if (query.ast) {\n      let queryAST = query.ast;\n\n      const referencedColumns = query.referencedColumns.concat(exactColumns || []);\n\n      // If there's an `exactColumn`, pick it out specifically with a guaranteed unique alias so it can be\n      // referenced with certainty in outer queries. The following is an oversimplified example of the problem:\n      //\n      // if `id` is part of the table and needs to be references in the outer query, it must be called out specifically:\n      //\n      // INVALID:\n      //   SELECT * FROM(SELECT *, *, * FROM table) WHERE id = ...\n      //\n      // VALID:\n      //   SELECT * FROM(SELECT *, *, *, id AS __value FROM table) WHERE __value = ...\n      //\n      // Given arbitrary subqueries, we must be able to reference columns in them exactly even when there are duplicates.\n      // We can't assume they're all simple ColumnRef's either. Some ResTarget's might be entire graphs of expressions which\n      // needs to be duplicated to ensure uniqueness.\n      if (referencedColumns.length) {\n        queryAST = JSON.parse(JSON.stringify(queryAST));\n\n        for (const column of referencedColumns) {\n          Converter.duplicateResTargetWithExactName(query, queryAST.SelectStmt.targetList,\n                                                    column, column.id);\n        }\n      }\n\n      return [ RangeSubselect(queryAST, Alias('records')) ];\n    }\n\n    baseQuery = this.formQueryRangeVar(query);\n\n    const visitedTables = {};\n\n    if (leftJoins) {\n      for (const join of leftJoins) {\n        if (!visitedTables[join.alias]) {\n          visitedTables[join.alias] = join;\n\n          baseQuery = Converter.joinClause(baseQuery, join);\n        }\n      }\n    }\n\n    return [ baseQuery ];\n  }\n\n  whereClause(query, boundingBox, search, options = {}) {\n    const systemParts = [];\n    options = {...query.options || {}, ...options};\n\n    const filterNode = this.nodeForCondition(query.filter, options);\n\n    if (boundingBox) {\n      systemParts.push(this.boundingBoxFilter(query, boundingBox));\n    }\n\n    if (search && search.trim().length) {\n      systemParts.push(this.searchFilter(query, search));\n    }\n\n    systemParts.push(this.nodeForExpression(query.dateFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.statusFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.projectFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.assignmentFilter, options));\n\n    for (const item of query.columnSettings.columns) {\n      if (item.hasFilter) {\n        const expression = this.createExpressionForColumnFilter(item.filter, options);\n\n        if (expression) {\n          systemParts.push(expression);\n        }\n      }\n\n      if (item.search) {\n        if (item.column.isArray || item.column.isDate || item.column.isNumber) {\n          systemParts.push(AExpr(8, '~~*', TypeCast(TypeName('text'), columnRef(item.column)),\n                                           AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        } else {\n          systemParts.push(AExpr(8, '~~*', columnRef(item.column),\n                                           AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        }\n      }\n\n      if (item.expression.isValid) {\n        systemParts.push(this.nodeForExpression(item.expression, options));\n      }\n\n      if (item.range.isValid) {\n        systemParts.push(this.nodeForExpression(item.range, options));\n      }\n    }\n\n    if (options.expressions) {\n      systemParts.push.apply(systemParts, options.expressions);\n    }\n\n    const expressions = systemParts.filter(o => o != null);\n\n    if (filterNode && expressions.length) {\n      return BoolExpr(0, [ filterNode, ...expressions ]);\n    } else if (expressions.length) {\n      return BoolExpr(0, [ ...expressions ]);\n    }\n\n    return filterNode;\n  }\n\n  static joinClause(baseQuery, {inner, tableName, alias, sourceColumn, joinColumn, sourceTableName}) {\n    return JoinExpr(inner ? 0 : 1,\n                    baseQuery,\n                    RangeVar(tableName, Alias(alias)),\n                    AExpr(0, '=', ColumnRef(sourceColumn, sourceTableName || 'records'), ColumnRef(joinColumn, alias)));\n  }\n\n  static duplicateResTargetWithExactName(query, targetList, column, exactName) {\n    let resTarget = Converter.findResTarget(query, column);\n\n    // If a column is referenced more than once don't add it again\n    for (const existing of targetList) {\n      if (existing.ResTarget.name === exactName) {\n        return;\n      }\n    }\n\n    // If we found a matching restarget, copy the entire node and give it a new name\n    if (resTarget) {\n      resTarget = JSON.parse(JSON.stringify(resTarget));\n      resTarget.ResTarget.name = exactName;\n    } else {\n      resTarget = ResTarget(ColumnRef(column.columnName, column.source), exactName);\n    }\n\n    targetList.push(resTarget);\n  }\n\n  static findResTarget(query, column) {\n    // UNION's don't have targetList's\n    if (!query.ast.SelectStmt.targetList) {\n      return null;\n    }\n\n    // look for any A_Star nodes, a SELECT * modifies how we process the res targets. If there's\n    // an A_Star node in the targetList, it means that we can't just get the column by index because\n    // the * might expand to columns that cause the indexes to be different.\n    const hasStar = query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget &&\n             target.ResTarget.val &&\n             target.ResTarget.val.ColumnRef &&\n             target.ResTarget.val.ColumnRef.fields &&\n             target.ResTarget.val.ColumnRef.fields[0] &&\n             target.ResTarget.val.ColumnRef.fields[0].A_Star;\n    });\n\n    // the simple case is when there is no * in the query\n    if (!hasStar && query.ast.SelectStmt.targetList.length === query.schema.columns.length) {\n      return query.ast.SelectStmt.targetList[column.index];\n    }\n\n    // Find the ResTarget node by name, or else return null, which means the column\n    // must be coming from a * node and we can just use a simple ResTarget + ColumnRef\n    return query.ast.SelectStmt.targetList.find((target) => {\n      return target.ResTarget.name === column.name;\n    });\n  }\n\n  formQueryRangeVar(query) {\n    if (query.repeatableKey) {\n      return RangeVar(query.form.id + '/' + query.repeatableKey + '/_full', Alias('records'));\n    }\n\n    return RangeVar(query.form.id + '/_full', Alias('records'));\n  }\n\n  createExpressionForColumnFilter(filter, options) {\n    let expression = null;\n\n    if (filter === options.except) {\n      return null;\n    }\n\n    if (filter.hasValues) {\n      let hasNull = false;\n      const values = [];\n\n      filter.value.forEach(v => {\n        if (v != null) {\n          values.push(v);\n        } else {\n          hasNull = true;\n        }\n      });\n\n      if (values.length) {\n        if (filter.column.isArray) {\n          expression = this.AnyOf(filter.column, values);\n        } else {\n          expression = this.In(filter.column, values);\n        }\n\n        if (hasNull) {\n          expression = BoolExpr(1, [ NullTest(0, columnRef(filter.column)), expression ]);\n        }\n      } else if (hasNull) {\n        expression = NullTest(0, columnRef(filter.column));\n      }\n    } else if (filter.isEmptySet) {\n      // add 1 = 0 clause to return 0 rows\n      expression = AExpr(0, '=', AConst(IntegerValue(1)),\n                                 AConst(IntegerValue(0)));\n    }\n\n    return expression;\n  }\n\n  boundingBoxFilter(query, boundingBox) {\n    const args = [\n      AConst(FloatValue(boundingBox[0])),\n      AConst(FloatValue(boundingBox[1])),\n      AConst(FloatValue(boundingBox[2])),\n      AConst(FloatValue(boundingBox[3])),\n      AConst(IntegerValue(4326))\n    ];\n\n    const rhs = FuncCall('st_makeenvelope', args);\n\n    const columnName = query.ast ? '__geometry' : '_geometry';\n\n    return AExpr(0, '&&', ColumnRef(columnName), rhs);\n  }\n\n  escapeLikePercent(value) {\n    return value.replace(/\\%/g, '\\\\%').replace(/_/g, '\\\\_%');\n  }\n\n  searchFilter(query, search) {\n    /*\n       Search takes the general form:\n\n       SELECT ...\n       FROM ...\n       WHERE\n         _record_index @@ to_tsquery('english', '''bacon'':*'::tsquery::text) AND\n         _record_index_text ILIKE '%bacon%'\n\n       NB: The awkward cast through a text type is to properly escape raw user input as a tsquery.\n\n       For example:\n         to_tsquery('Nor:*') vs 'Nor:*'::tsquery\n\n       Also, the ILIKE handles further reduces the resultset to exact matches which is what Fulcrum\n       users more often expect. The general idea is to use the FTS index to massively reduce the result\n       set before applying the much slower ILIKE operation. So, we can reduce the result very quickly\n       with the tsvector index first, and then only run the ILIKE on what's left.\n    */\n\n    search = search.trim();\n\n    // if it's a fully custom SQL statement, use a simpler form with no index\n    if (query.ast) {\n      return AExpr(8, '~~*', TypeCast(TypeName('text'), ColumnRef('records')),\n                             AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n    }\n\n    const toTsQuery = (dictionary, term) => {\n      const args = [ AConst(StringValue(dictionary)), AConst(StringValue(\"'\" + term + \"':*\")) ];\n\n      return FuncCall('to_tsquery', args);\n    };\n\n    const makeTsQueryCall = (term) => {\n      return toTsQuery(term.length > 3 ? 'english' : 'simple',\n                       term.toLowerCase().replace(/'/g, \"''\"));\n    };\n\n    const terms = search.split(' ').filter(s => s.trim().length);\n\n    let term = terms.shift();\n\n    let tsQueries = makeTsQueryCall(term);\n\n    while (terms.length) {\n      term = terms.shift();\n      tsQueries = AExpr(0, '&&', tsQueries, makeTsQueryCall(term));\n    }\n\n    const ftsExpression = AExpr(0, '@@', ColumnRef('_record_index'), tsQueries);\n\n    const ilikeExpression = AExpr(8, '~~*', ColumnRef('_record_index_text'),\n                                  AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n\n    const andArgs = [\n      ftsExpression,\n      ilikeExpression\n    ];\n\n    return BoolExpr(0, andArgs);\n  }\n\n  summaryWhereClause(query, columnSetting, {boundingBox, searchFilter}) {\n    const expressions = [];\n\n    const converters = {\n      [AggregateType.Empty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.NotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentEmpty.name]: () => {\n        return NullTest(0, columnRef(columnSetting.column));\n      },\n      [AggregateType.PercentNotEmpty.name]: () => {\n        return NullTest(1, columnRef(columnSetting.column));\n      }\n    };\n\n    const expressionConverter = converters[columnSetting.summary.aggregate];\n\n    if (expressionConverter) {\n      expressions.push(expressionConverter());\n    }\n\n    return this.whereClause(query, boundingBox, searchFilter, {expressions});\n  }\n\n  summaryTargetList(query, columnSetting) {\n    const simpleFunctionResTarget = (funcName, param) => {\n      return () => {\n        return [ ResTarget(FuncCall(funcName, [ param || columnRef(columnSetting.column) ]), 'value') ];\n      };\n    };\n\n    const converter = {\n      [AggregateType.Sum.name]: simpleFunctionResTarget('sum'),\n      [AggregateType.Average.name]: simpleFunctionResTarget('avg'),\n      [AggregateType.Min.name]: simpleFunctionResTarget('min'),\n      [AggregateType.Max.name]: simpleFunctionResTarget('max'),\n      [AggregateType.StdDev.name]: simpleFunctionResTarget('stddev'),\n      [AggregateType.Histogram.name]: simpleFunctionResTarget('count'),\n      [AggregateType.Empty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.NotEmpty.name]: simpleFunctionResTarget('count', AConst(IntegerValue(1))),\n      [AggregateType.Unique.name]: () => {\n        return [ ResTarget(FuncCall('count', [ columnRef(columnSetting.column) ], {agg_distinct: true}), 'value') ];\n      },\n      [AggregateType.PercentEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentNotEmpty.name]: simpleFunctionResTarget('count'),\n      [AggregateType.PercentUnique.name]: simpleFunctionResTarget('count')\n    };\n\n    return converter[columnSetting.summary.aggregate]();\n  }\n\n  nodeForExpressions(expressions, options) {\n    return expressions.map(e => this.nodeForExpression(e, options))\n                      .filter(e => e);\n  }\n\n  nodeForCondition(condition, options) {\n    const converter = {\n      [ConditionType.And]: this.AndConverter,\n      [ConditionType.Or]: this.OrConverter,\n      [ConditionType.Not]: this.NotConverter\n    };\n\n    return converter[condition.type](condition, options);\n  }\n\n  nodeForExpression(expression, options) {\n    if (expression.expressions) {\n      return this.nodeForCondition(expression, options);\n    }\n\n    if (expression === options.except) {\n      return null;\n    }\n\n    const converter = {\n      [OperatorType.Empty.name]: this.EmptyConverter,\n      [OperatorType.NotEmpty.name]: this.NotEmptyConverter,\n      [OperatorType.Equal.name]: this.EqualConverter,\n      [OperatorType.NotEqual.name]: this.NotEqualConverter,\n      [OperatorType.GreaterThan.name]: this.GreaterThanConverter,\n      [OperatorType.GreaterThanOrEqual.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.LessThan.name]: this.LessThanConverter,\n      [OperatorType.LessThanOrEqual.name]: this.LessThanOrEqualConverter,\n      [OperatorType.Between.name]: this.BetweenConverter,\n      [OperatorType.NotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.In.name]: this.InConverter,\n      [OperatorType.NotIn.name]: this.NotInConverter,\n      [OperatorType.TextContain.name]: this.TextContainConverter,\n      [OperatorType.TextNotContain.name]: this.TextNotContainConverter,\n      [OperatorType.TextStartsWith.name]: this.TextStartsWithConverter,\n      [OperatorType.TextEndsWith.name]: this.TextEndsWithConverter,\n      [OperatorType.TextEqual.name]: this.TextEqualConverter,\n      [OperatorType.TextNotEqual.name]: this.TextNotEqualConverter,\n      [OperatorType.TextMatch.name]: this.TextMatchConverter,\n      [OperatorType.TextNotMatch.name]: this.TextNotMatchConverter,\n      [OperatorType.DateEqual.name]: this.EqualConverter,\n      [OperatorType.DateNotEqual.name]: this.NotEqualConverter,\n      [OperatorType.DateAfter.name]: this.GreaterThanConverter,\n      [OperatorType.DateOnOrAfter.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.DateBefore.name]: this.LessThanConverter,\n      [OperatorType.DateOnOrBefore.name]: this.LessThanOrEqualConverter,\n      [OperatorType.DateBetween.name]: this.BetweenConverter,\n      [OperatorType.DateNotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.ArrayAnyOf.name]: this.ArrayAnyOfConverter,\n      [OperatorType.ArrayAllOf.name]: this.ArrayAllOfConverter,\n      [OperatorType.ArrayEqual.name]: this.ArrayEqualConverter,\n      [OperatorType.Search.name]: this.SearchConverter,\n      [OperatorType.DateToday.name]: this.DynamicDateConverter,\n      [OperatorType.DateYesterday.name]: this.DynamicDateConverter,\n      [OperatorType.DateTomorrow.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast7Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast30Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast90Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsAgo.name]: this.DynamicDateConverter\n    };\n\n    if (!expression.isValid) {\n      return null;\n    }\n\n    return converter[expression.operator](expression, options);\n  }\n\n  BooleanConverter = (type, condition, options) => {\n    const args = this.nodeForExpressions(condition.expressions, options);\n\n    if (args && args.length) {\n      return BoolExpr(type, args);\n    }\n\n    return null;\n  }\n\n  AndConverter = (condition, options) => {\n    return this.BooleanConverter(0, condition, options);\n  }\n\n  OrConverter = (condition, options) => {\n    return this.BooleanConverter(1, condition, options);\n  }\n\n  NotConverter = (condition, options) => {\n    if (condition.expressions.length > 1) {\n      return BoolExpr(2, [ this.BooleanConverter(0, condition, options) ]);\n    }\n\n    return this.BooleanConverter(2, condition, options);\n  }\n\n  NotEmptyConverter = (expression) => {\n    return NullTest(1, columnRef(expression.column));\n  }\n\n  EmptyConverter = (expression) => {\n    return NullTest(0, columnRef(expression.column));\n  }\n\n  EqualConverter = (expression) => {\n    return this.BinaryConverter(0, '=', expression);\n  }\n\n  NotEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<>', expression);\n  }\n\n  GreaterThanConverter = (expression) => {\n    return this.BinaryConverter(0, '>', expression);\n  }\n\n  GreaterThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '>=', expression);\n  }\n\n  LessThanConverter = (expression) => {\n    return this.BinaryConverter(0, '<', expression);\n  }\n\n  LessThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<=', expression);\n  }\n\n  BetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options).endOf('day'));\n    }\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options).endOf('day'));\n    }\n\n    return this.NotBetween(expression.column, value1, value2);\n  }\n\n  InConverter = (expression) => {\n    return this.In(expression.column, expression.value);\n  }\n\n  NotInConverter = (expression) => {\n    const values = expression.value.map(v => this.ConstValue(expression.column, v));\n\n    return AExpr(6, '<>', columnRef(expression.column),\n                 values);\n  }\n\n  BinaryConverter = (kind, operator, expression) => {\n    return AExpr(kind, operator, columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  FieldConverter = (expression) => {\n    return ColumnRef(expression.name);\n  }\n\n  ConstantConverter = (expression) => {\n    return this.ConstValue(expression.column, expression.scalarValue);\n  }\n\n  TextEqualConverter = (expression) => {\n    return AExpr(8, '~~*', columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextNotEqualConverter = (expression) => {\n    return AExpr(8, '!~~*', columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextContainConverter = (expression) => {\n    return AExpr(8, '~~*', columnRef(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextNotContainConverter = (expression) => {\n    return AExpr(8, '!~~*', columnRef(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextStartsWithConverter = (expression) => {\n    return AExpr(8, '~~*', columnRef(expression.column),\n                 AConst(StringValue(this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextEndsWithConverter = (expression) => {\n    return AExpr(8, '~~*', columnRef(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue))));\n  }\n\n  TextMatchConverter = (expression) => {\n    return AExpr(0, '~*', columnRef(expression.column),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  TextNotMatchConverter = (expression) => {\n    return AExpr(0, '!~*', columnRef(expression.column),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  ArrayAnyOfConverter = (expression) => {\n    return this.AnyOf(expression.column, expression.value);\n  }\n\n  ArrayAllOfConverter = (expression) => {\n    const values = AArrayExpr(expression.value.map(v => this.ConstValue(expression.column, v)));\n\n    return AExpr(0, '@>', columnRef(expression.column),\n                 values);\n  }\n\n  ArrayEqualConverter = (expression) => {\n    const values = AArrayExpr(expression.value.map(v => this.ConstValue(expression.column, v)));\n\n    const a = AExpr(0, '<@', columnRef(expression.column),\n                    values);\n\n    const b = AExpr(0, '@>', columnRef(expression.column),\n                    values);\n\n    return BoolExpr(0, [ a, b ]);\n  }\n\n  SearchConverter = (expression) => {\n    const rhs = FuncCall('to_tsquery', [ this.ConstValue(expression.column, expression.scalarValue) ]);\n\n    return AExpr(0, '@@', columnRef(expression.column),\n                 rhs);\n  }\n\n  DynamicDateConverter = (expression, options) => {\n    // Let the caller specify the timezone to be used for dynamic date calculations. This\n    // makes sure when the browser calculates a dynamic range, the server would calculate\n    // the same range. So 'Today' is midnight to midnight in the user's local time. It would\n    // be much less useful and confusing if we forced \"Today\" to always be London's today.\n    const now = this.GetDate(null, options);\n\n    const range = calculateDateRange(expression.operator, expression.value, now);\n\n    const value1 = this.ConvertDateValue(range[0]);\n    const value2 = this.ConvertDateValue(range[1]);\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetween = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(11, 'NOT BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '<', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '>', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  AnyOf = (column, values) => {\n    const arrayValues = AArrayExpr(values.map(v => this.ConstValue(column, v)));\n\n    return AExpr(0, '&&', columnRef(column), arrayValues);\n  }\n\n  In = (column, values) => {\n    const arrayValues = values.map(v => this.ConstValue(column, v));\n\n    return AExpr(6, '=', columnRef(column), arrayValues);\n  }\n\n  Between = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(10, 'BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '>=', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '<=', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  ConstValue = (column, value) => {\n    if (value == null) {\n      return null;\n    }\n\n    if (column.isInteger) {\n      return AConst(IntegerValue(value));\n    }\n\n    if (column.isNumber) {\n      return AConst(FloatValue(value));\n    }\n\n    return AConst(StringValue(value));\n  }\n\n  GetDate = (date, options) => {\n    const timeZone = (options && options.timeZone) || moment.tz.guess();\n\n    return moment(date || new Date()).tz(timeZone);\n  }\n\n  ConvertDateValue = (date) => {\n    if (date) {\n      return date.clone().toISOString();\n    }\n    return null;\n  }\n}\n"]}