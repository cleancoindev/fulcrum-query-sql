{"version":3,"sources":["../../src/ast/converter.js"],"names":["Converter","BooleanConverter","type","condition","options","args","nodeForExpressions","expressions","length","AndConverter","OrConverter","NotConverter","NotEmptyConverter","expression","columnName","EmptyConverter","EqualConverter","BinaryConverter","NotEqualConverter","GreaterThanConverter","GreaterThanOrEqualConverter","LessThanConverter","LessThanOrEqualConverter","BetweenConverter","value1","value2","isDateOperator","ConvertDateValue","GetDate","startOf","endOf","Between","NotBetweenConverter","NotBetween","InConverter","In","value","NotInConverter","values","map","v","kind","operator","scalarValue","FieldConverter","name","ConstantConverter","TextEqualConverter","TextNotEqualConverter","TextContainConverter","escapeLikePercent","TextNotContainConverter","TextStartsWithConverter","TextEndsWithConverter","TextMatchConverter","TextNotMatchConverter","ArrayAnyOfConverter","AnyOf","ArrayAllOfConverter","ArrayEqualConverter","a","b","SearchConverter","rhs","DynamicDateConverter","now","range","arrayValues","date","timeZone","tz","guess","Date","clone","toISOString","toAST","query","sort","pageSize","pageIndex","boundingBox","searchFilter","targetList","fromClause","whereClause","sortClause","limitOffset","limitCount","toCountAST","toTileAST","form","id","toHistogramAST","bucketSize","withClause","histogramWithClause","seriesFunctionSublinkSelect","seriesFunctionArgs","seriesFunctionCall","seriesFunction","bucketWidthFunctionCallArgs","bucketsSubqueryTargetList","bucketsSubqueryFromClause","bucketsSubqueryGroupClause","bucketsSubquerySortClause","bucketsSubquery","groupClause","bucketsSubselect","joinExpr","toDistinctValuesAST","array","push","by","recordsTargetList","datePartArgs","recordsFromClause","recordsSelect","recordsExpr","statsTargetList","statsFromClause","statsSelect","statsExpr","search","systemParts","filterNode","nodeForCondition","filter","boundingBoxFilter","trim","nodeForExpression","dateFilter","createExpressionForColumnFilter","statusFilter","projectFilter","assignmentFilter","columnSettings","columns","item","hasFilter","column","isValid","o","except","hasValues","hasNull","forEach","isArray","isEmptySet","replace","toTsQuery","dictionary","term","makeTsQueryCall","toLowerCase","terms","split","s","shift","tsQueries","ftsExpression","ilikeExpression","andArgs","e","converter","And","Or","Not","Empty","NotEmpty","Equal","NotEqual","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","NotIn","TextContain","TextNotContain","TextStartsWith","TextEndsWith","TextEqual","TextNotEqual","TextMatch","TextNotMatch","DateEqual","DateNotEqual","DateAfter","DateOnOrAfter","DateBefore","DateOnOrBefore","DateBetween","DateNotBetween","ArrayAnyOf","ArrayAllOf","ArrayEqual","Search","DateToday","DateYesterday","DateTomorrow","DateLast7Days","DateLast30Days","DateLast90Days","DateLastMonth","DateLastYear","DateNextWeek","DateNextMonth","DateNextYear","DateCurrentCalendarWeek","DateCurrentCalendarMonth","DateCurrentCalendarYear","DatePreviousCalendarWeek","DatePreviousCalendarMonth","DatePreviousCalendarYear","DateNextCalendarWeek","DateNextCalendarMonth","DateNextCalendarYear","DateDaysFromNow","DateWeeksFromNow","DateMonthsFromNow","DateYearsFromNow","DateDaysAgo","DateWeeksAgo","DateMonthsAgo","DateYearsAgo"],"mappings":"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","file":"converter.js","sourcesContent":["import { ColumnRef,\n         ResTarget,\n         AStar,\n         RangeVar,\n         SelectStmt,\n         BoolExpr,\n         NullTest,\n         AExpr,\n         AConst,\n         StringValue,\n         AArrayExpr,\n         IntegerValue,\n         FloatValue,\n         SortBy,\n         TypeCast,\n         TypeName,\n         FuncCall,\n         WindowDef,\n         RangeSubselect,\n         WithClause,\n         CommonTableExpr,\n         RangeFunction,\n         JoinExpr,\n         Alias,\n         CoalesceExpr,\n         SubLink } from './helpers';\n\nimport { ConditionType } from '../condition';\nimport { OperatorType, calculateDateRange } from '../operator';\nimport moment from 'moment-timezone';\n\n// import { SelectStmt } from './ast/helpers';\n\nexport default class Converter {\n  toAST(query, {sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = this.targetList(query, sort);\n\n    const fromClause = this.fromClause(query);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    const sortClause = sort;\n\n    const limitOffset = this.limitOffset(pageSize, pageIndex);\n\n    const limitCount = this.limitCount(pageSize);\n\n    return SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount});\n  }\n\n  toCountAST(query, {boundingBox, searchFilter}) {\n    const targetList = [ ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'total_count') ];\n\n    const fromClause = this.fromClause(query);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toTileAST(query, {searchFilter}) {\n    const targetList = [\n      ResTarget(ColumnRef('_record_id')),\n      ResTarget(FuncCall('st_x', [ ColumnRef('_geometry') ]), 'x'),\n      ResTarget(FuncCall('st_y', [ ColumnRef('_geometry') ]), 'y'),\n      ResTarget(ColumnRef('_status')),\n      ResTarget(TypeCast(TypeName('text'), AConst(StringValue(query.form.id))), 'form_id')\n    ];\n\n    const fromClause = this.fromClause(query);\n\n    const whereClause = this.whereClause(query, null, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toHistogramAST(query, {columnName, bucketSize, type, sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = [\n      ResTarget(ColumnRef('series', 'series'), 'bucket'),\n      ResTarget(CoalesceExpr([ ColumnRef('count', 'sub'), AConst(IntegerValue(0)) ]), 'count'),\n      ResTarget(ColumnRef('min_value', 'sub'), 'min_value'),\n      ResTarget(ColumnRef('max_value', 'sub'), 'max_value'),\n      ResTarget(ColumnRef('avg_value', 'sub'), 'avg_value'),\n      ResTarget(ColumnRef('sum_value', 'sub'), 'sum_value')\n    ];\n\n    const withClause = this.histogramWithClause(columnName, bucketSize, type, query);\n\n    const seriesFunctionSublinkSelect = SelectStmt({\n      targetList: [ ResTarget(AExpr(0, '+', ColumnRef('buckets'), AConst(IntegerValue(1)))) ],\n      fromClause: [ RangeVar('__stats') ]\n    });\n\n    const seriesFunctionArgs = [\n      AConst(IntegerValue(1)),\n      SubLink(4, seriesFunctionSublinkSelect)\n    ];\n\n    const seriesFunctionCall = FuncCall('generate_series', seriesFunctionArgs);\n    const seriesFunction = RangeFunction([ [ seriesFunctionCall ] ], Alias('series'));\n\n    const bucketWidthFunctionCallArgs = [\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef('value')),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('min_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('max_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('buckets')) ], fromClause: [ RangeVar('__stats') ]}))\n    ];\n\n    const bucketsSubqueryTargetList = [\n      ResTarget(FuncCall('width_bucket', bucketWidthFunctionCallArgs), 'bucket'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(FuncCall('avg', [ ColumnRef('value') ]), 'avg_value'),\n      ResTarget(FuncCall('sum', [ ColumnRef('value') ]), 'sum_value')\n    ];\n\n    const bucketsSubqueryFromClause = [ RangeVar('__records') ];\n    const bucketsSubqueryGroupClause = [ AConst(IntegerValue(1)) ];\n    const bucketsSubquerySortClause = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n    const bucketsSubquery = SelectStmt({\n      targetList: bucketsSubqueryTargetList,\n      fromClause: bucketsSubqueryFromClause,\n      groupClause: bucketsSubqueryGroupClause,\n      sortClause: bucketsSubquerySortClause\n    });\n\n    const bucketsSubselect = RangeSubselect(bucketsSubquery, Alias('sub'));\n\n    const joinExpr = JoinExpr(1,\n                              seriesFunction,\n                              bucketsSubselect,\n                              AExpr(0, '=', ColumnRef('series', 'series'), ColumnRef('bucket', 'sub')));\n\n    return SelectStmt({targetList, fromClause: [ joinExpr ], withClause});\n  }\n\n  toDistinctValuesAST(query, options = {}) {\n    const targetList = options.array ? [ ResTarget(FuncCall('unnest', [ ColumnRef(options.name) ]), 'value') ]\n                                     : [ ResTarget(ColumnRef(options.name), 'value') ];\n\n    targetList.push(ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'));\n\n    const fromClause = this.fromClause(query);\n\n    // const whereClause = null; // options.all ? null : this.whereClause(query);\n    // TODO(zhm) need to pass the bbox and search here?\n    const whereClause = this.whereClause(query, null, null, options);\n\n    const groupClause = [ AConst(IntegerValue(1)) ];\n\n    const sortClause = [];\n\n    if (options.by === 'frequency') {\n      sortClause.push(SortBy(AConst(IntegerValue(2)), 2, 0));\n    }\n\n    sortClause.push(SortBy(AConst(IntegerValue(1)), 1, 0));\n\n    return SelectStmt({targetList, fromClause, whereClause, groupClause, sortClause});\n  }\n\n  histogramWithClause(columnName, bucketSize, type, query) {\n    let recordsTargetList = null;\n\n    if (type === 'date') {\n      const datePartArgs = [\n        AConst(StringValue('epoch')),\n        TypeCast(TypeName('date'), ColumnRef(columnName))\n      ];\n\n      recordsTargetList = [ ResTarget(FuncCall('date_part', datePartArgs), 'value') ];\n    } else {\n      recordsTargetList = [ ResTarget(TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef(columnName)), 'value') ];\n    }\n\n    const recordsFromClause = [ RangeVar(query.form.id + '/_full') ];\n    const recordsSelect = SelectStmt({targetList: recordsTargetList, fromClause: recordsFromClause});\n    const recordsExpr = CommonTableExpr('__records', recordsSelect);\n\n    const statsTargetList = [\n      ResTarget(AConst(IntegerValue(bucketSize)), 'buckets'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value')\n    ];\n\n    const statsFromClause = [ RangeVar('__records') ];\n    const statsSelect = SelectStmt({targetList: statsTargetList, fromClause: statsFromClause});\n    const statsExpr = CommonTableExpr('__stats', statsSelect);\n\n    return WithClause([ recordsExpr, statsExpr ]);\n  }\n\n  limitOffset(pageSize, pageIndex) {\n    if (pageSize != null && pageIndex != null) {\n      return AConst(IntegerValue(+pageIndex * +pageSize));\n    }\n\n    return null;\n  }\n\n  limitCount(pageSize) {\n    if (pageSize != null) {\n      return AConst(IntegerValue(+pageSize));\n    }\n\n    return null;\n  }\n\n  targetList(query, sort) {\n    return [\n      ResTarget(ColumnRef(AStar())),\n      ResTarget(FuncCall('row_number', null, WindowDef(sort, 530)), '_row_number')\n    ];\n  }\n\n  fromClause(query) {\n    return [ RangeVar(query.form.id + '/_full') ];\n  }\n\n  whereClause(query, boundingBox, search, options = {}) {\n    const systemParts = [];\n    options = {...query.options || {}, ...options};\n\n    const filterNode = this.nodeForCondition(query.filter, options);\n\n    if (boundingBox) {\n      systemParts.push(this.boundingBoxFilter(boundingBox));\n    }\n\n    if (search && search.trim().length) {\n      systemParts.push(this.searchFilter(search));\n    }\n\n    systemParts.push(this.nodeForExpression(query.dateFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.statusFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.projectFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.assignmentFilter, options));\n\n    for (const item of query.columnSettings.columns) {\n      if (item.hasFilter) {\n        const expression = this.createExpressionForColumnFilter(item.filter, options);\n\n        if (expression) {\n          systemParts.push(expression);\n        }\n      }\n\n      if (item.search) {\n        systemParts.push(AExpr(8, '~~*', ColumnRef(item.column.columnName),\n                                         AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n      }\n\n      if (item.expression.isValid) {\n        systemParts.push(this.nodeForExpression(item.expression, options));\n      }\n\n      if (item.range.isValid) {\n        systemParts.push(this.nodeForExpression(item.range, options));\n      }\n    }\n\n    const expressions = systemParts.filter(o => o != null);\n\n    if (filterNode && expressions.length) {\n      return BoolExpr(0, [ filterNode, ...expressions ]);\n    } else if (expressions.length) {\n      return BoolExpr(0, [ ...expressions ]);\n    }\n\n    return filterNode;\n  }\n\n  createExpressionForColumnFilter(filter, options) {\n    let expression = null;\n\n    if (filter === options.except) {\n      return null;\n    }\n\n    if (filter.hasValues) {\n      let hasNull = false;\n      const values = [];\n\n      filter.value.forEach(v => {\n        if (v != null) {\n          values.push(v);\n        } else {\n          hasNull = true;\n        }\n      });\n\n      if (values.length) {\n        if (filter.column.isArray) {\n          expression = this.AnyOf(filter.columnName, values);\n        } else {\n          expression = this.In(filter.columnName, values);\n        }\n\n        if (hasNull) {\n          expression = BoolExpr(1, [ NullTest(0, ColumnRef(filter.columnName)), expression ]);\n        }\n      } else if (hasNull) {\n        expression = NullTest(0, ColumnRef(filter.columnName));\n      }\n    } else if (filter.isEmptySet) {\n      // add 1 = 0 clause to return 0 rows\n      expression = AExpr(0, '=', AConst(IntegerValue(1)),\n                                 AConst(IntegerValue(0)));\n    }\n\n    return expression;\n  }\n\n  boundingBoxFilter(boundingBox) {\n    const args = [\n      AConst(FloatValue(boundingBox[0])),\n      AConst(FloatValue(boundingBox[1])),\n      AConst(FloatValue(boundingBox[2])),\n      AConst(FloatValue(boundingBox[3])),\n      AConst(IntegerValue(4326))\n    ];\n\n    const rhs = FuncCall('st_makeenvelope', args);\n\n    return AExpr(0, '&&', ColumnRef('_geometry'), rhs);\n  }\n\n  escapeLikePercent(value) {\n    return value.replace(/\\%/g, '\\\\%');\n  }\n\n  searchFilter(search) {\n    /*\n       Search takes the general form:\n\n       SELECT ...\n       FROM ...\n       WHERE\n         _record_index @@ to_tsquery('english', '''bacon'':*'::tsquery::text) AND\n         _record_index_text ILIKE '%bacon%'\n\n       NB: The awkward cast through a text type is to properly escape raw user input as a tsquery.\n\n       For example:\n         to_tsquery('Nor:*') vs 'Nor:*'::tsquery\n\n       Also, the ILIKE handles further reduces the resultset to exact matches which is what Fulcrum\n       users more often expect. The general idea is to use the FTS index to massively reduce the result\n       set before applying the much slower ILIKE operation. So, we can reduce the result very quickly\n       with the tsvector index first, and then only run the ILIKE on what's left.\n    */\n\n    search = search.trim();\n\n    const toTsQuery = (dictionary, term) => {\n      const args = [ AConst(StringValue(dictionary)), AConst(StringValue(\"'\" + term + \"':*\")) ];\n\n      return FuncCall('to_tsquery', args);\n    };\n\n    const makeTsQueryCall = (term) => {\n      return toTsQuery(term.length > 3 ? 'english' : 'simple',\n                       term.toLowerCase().replace(/'/g, \"''\"));\n    };\n\n    const terms = search.split(' ').filter(s => s.trim().length);\n\n    let term = terms.shift();\n\n    let tsQueries = makeTsQueryCall(term);\n\n    while (terms.length) {\n      term = terms.shift();\n      tsQueries = AExpr(0, '&&', tsQueries, makeTsQueryCall(term));\n    }\n\n    const ftsExpression = AExpr(0, '@@', ColumnRef('_record_index'), tsQueries);\n\n    const ilikeExpression = AExpr(8, '~~*', ColumnRef('_record_index_text'),\n                                  AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n\n    const andArgs = [\n      ftsExpression,\n      ilikeExpression\n    ];\n\n    return BoolExpr(0, andArgs);\n  }\n\n  nodeForExpressions(expressions, options) {\n    return expressions.map(e => this.nodeForExpression(e, options))\n                      .filter(e => e);\n  }\n\n  nodeForCondition(condition, options) {\n    const converter = {\n      [ConditionType.And]: this.AndConverter,\n      [ConditionType.Or]: this.OrConverter,\n      [ConditionType.Not]: this.NotConverter\n    };\n\n    return converter[condition.type](condition, options);\n  }\n\n  nodeForExpression(expression, options) {\n    if (expression.expressions) {\n      return this.nodeForCondition(expression, options);\n    }\n\n    if (expression === options.except) {\n      return null;\n    }\n\n    const converter = {\n      [OperatorType.Empty.name]: this.EmptyConverter,\n      [OperatorType.NotEmpty.name]: this.NotEmptyConverter,\n      [OperatorType.Equal.name]: this.EqualConverter,\n      [OperatorType.NotEqual.name]: this.NotEqualConverter,\n      [OperatorType.GreaterThan.name]: this.GreaterThanConverter,\n      [OperatorType.GreaterThanOrEqual.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.LessThan.name]: this.LessThanConverter,\n      [OperatorType.LessThanOrEqual.name]: this.LessThanOrEqualConverter,\n      [OperatorType.Between.name]: this.BetweenConverter,\n      [OperatorType.NotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.In.name]: this.InConverter,\n      [OperatorType.NotIn.name]: this.NotInConverter,\n      [OperatorType.TextContain.name]: this.TextContainConverter,\n      [OperatorType.TextNotContain.name]: this.TextNotContainConverter,\n      [OperatorType.TextStartsWith.name]: this.TextStartsWithConverter,\n      [OperatorType.TextEndsWith.name]: this.TextEndsWithConverter,\n      [OperatorType.TextEqual.name]: this.TextEqualConverter,\n      [OperatorType.TextNotEqual.name]: this.TextNotEqualConverter,\n      [OperatorType.TextMatch.name]: this.TextMatchConverter,\n      [OperatorType.TextNotMatch.name]: this.TextNotMatchConverter,\n      [OperatorType.DateEqual.name]: this.EqualConverter,\n      [OperatorType.DateNotEqual.name]: this.NotEqualConverter,\n      [OperatorType.DateAfter.name]: this.GreaterThanConverter,\n      [OperatorType.DateOnOrAfter.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.DateBefore.name]: this.LessThanConverter,\n      [OperatorType.DateOnOrBefore.name]: this.LessThanOrEqualConverter,\n      [OperatorType.DateBetween.name]: this.BetweenConverter,\n      [OperatorType.DateNotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.ArrayAnyOf.name]: this.ArrayAnyOfConverter,\n      [OperatorType.ArrayAllOf.name]: this.ArrayAllOfConverter,\n      [OperatorType.ArrayEqual.name]: this.ArrayEqualConverter,\n      [OperatorType.Search.name]: this.SearchConverter,\n      [OperatorType.DateToday.name]: this.DynamicDateConverter,\n      [OperatorType.DateYesterday.name]: this.DynamicDateConverter,\n      [OperatorType.DateTomorrow.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast7Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast30Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast90Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsAgo.name]: this.DynamicDateConverter\n    };\n\n    if (!expression.isValid) {\n      return null;\n    }\n\n    return converter[expression.operator](expression, options);\n  }\n\n  BooleanConverter = (type, condition, options) => {\n    const args = this.nodeForExpressions(condition.expressions, options);\n\n    if (args && args.length) {\n      return BoolExpr(type, args);\n    }\n\n    return null;\n  }\n\n  AndConverter = (condition, options) => {\n    return this.BooleanConverter(0, condition, options);\n  }\n\n  OrConverter = (condition, options) => {\n    return this.BooleanConverter(1, condition, options);\n  }\n\n  NotConverter = (condition, options) => {\n    if (condition.expressions.length > 1) {\n      return BoolExpr(2, [ this.BooleanConverter(0, condition, options) ]);\n    }\n\n    return this.BooleanConverter(2, condition, options);\n  }\n\n  NotEmptyConverter = (expression) => {\n    return NullTest(1, ColumnRef(expression.columnName));\n  }\n\n  EmptyConverter = (expression) => {\n    return NullTest(0, ColumnRef(expression.columnName));\n  }\n\n  EqualConverter = (expression) => {\n    return this.BinaryConverter(0, '=', expression);\n  }\n\n  NotEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<>', expression);\n  }\n\n  GreaterThanConverter = (expression) => {\n    return this.BinaryConverter(0, '>', expression);\n  }\n\n  GreaterThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '>=', expression);\n  }\n\n  LessThanConverter = (expression) => {\n    return this.BinaryConverter(0, '<', expression);\n  }\n\n  LessThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<=', expression);\n  }\n\n  BetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options).endOf('day'));\n    }\n\n    return this.Between(expression.columnName, value1, value2);\n  }\n\n  NotBetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options).endOf('day'));\n    }\n\n    return this.NotBetween(expression.columnName, value1, value2);\n  }\n\n  InConverter = (expression) => {\n    return this.In(expression.columnName, expression.value);\n  }\n\n  NotInConverter = (expression) => {\n    const values = expression.value.map(v => AConst(StringValue(v)));\n\n    return AExpr(6, '<>', ColumnRef(expression.columnName),\n                 values);\n  }\n\n  BinaryConverter = (kind, operator, expression) => {\n    return AExpr(kind, operator, ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  FieldConverter = (expression) => {\n    return ColumnRef(expression.name);\n  }\n\n  ConstantConverter = (expression) => {\n    return AConst(StringValue(expression.scalarValue));\n  }\n\n  TextEqualConverter = (expression) => {\n    return AExpr(8, '~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  TextNotEqualConverter = (expression) => {\n    return AExpr(8, '!~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  TextContainConverter = (expression) => {\n    return AExpr(8, '~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextNotContainConverter = (expression) => {\n    return AExpr(8, '!~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextStartsWithConverter = (expression) => {\n    return AExpr(8, '~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextEndsWithConverter = (expression) => {\n    return AExpr(8, '~~*', ColumnRef(expression.columnName),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue))));\n  }\n\n  TextMatchConverter = (expression) => {\n    return AExpr(0, '~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  TextNotMatchConverter = (expression) => {\n    return AExpr(0, '!~*', ColumnRef(expression.columnName),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  ArrayAnyOfConverter = (expression) => {\n    return this.AnyOf(expression.columnName, expression.value);\n  }\n\n  ArrayAllOfConverter = (expression) => {\n    const values = AArrayExpr(expression.value.map(v => AConst(StringValue(v))));\n\n    return AExpr(0, '@>', ColumnRef(expression.columnName),\n                 values);\n  }\n\n  ArrayEqualConverter = (expression) => {\n    const values = AArrayExpr(expression.value.map(v => AConst(StringValue(v))));\n\n    const a = AExpr(0, '<@', ColumnRef(expression.columnName),\n                    values);\n\n    const b = AExpr(0, '@>', ColumnRef(expression.columnName),\n                    values);\n\n    return BoolExpr(0, [ a, b ]);\n  }\n\n  SearchConverter = (expression) => {\n    const rhs = FuncCall('to_tsquery', [ AConst(StringValue(expression.scalarValue)) ]);\n\n    return AExpr(0, '@@', ColumnRef(expression.columnName),\n                 rhs);\n  }\n\n  DynamicDateConverter = (expression, options) => {\n    // Let the caller specify the timezone to be used for dynamic date calculations. This\n    // makes sure when the browser calculates a dynamic range, the server would calculate\n    // the same range. So 'Today' is midnight to midnight in the user's local time. It would\n    // be much less useful and confusing if we forced \"Today\" to always be London's today.\n    const now = this.GetDate(null, options);\n\n    const range = calculateDateRange(expression.operator, expression.value, now);\n\n    const value1 = this.ConvertDateValue(range[0]);\n    const value2 = this.ConvertDateValue(range[1]);\n\n    return this.Between(expression.columnName, value1, value2);\n  }\n\n  NotBetween = (columnName, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(11, 'NOT BETWEEN', ColumnRef(columnName), [ AConst(StringValue(value1)), AConst(StringValue(value2)) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '<', ColumnRef(columnName), AConst(StringValue(value1)));\n    } else if (value2 != null) {\n      return AExpr(0, '>', ColumnRef(columnName), AConst(StringValue(value2)));\n    }\n\n    return null;\n  }\n\n  AnyOf = (columnName, values) => {\n    const arrayValues = AArrayExpr(values.map(v => AConst(StringValue(v))));\n\n    return AExpr(0, '&&', ColumnRef(columnName), arrayValues);\n  }\n\n  In = (columnName, values) => {\n    const arrayValues = values.map(v => AConst(StringValue(v)));\n\n    return AExpr(6, '=', ColumnRef(columnName), arrayValues);\n  }\n\n  Between = (columnName, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(10, 'BETWEEN', ColumnRef(columnName), [ AConst(StringValue(value1)), AConst(StringValue(value2)) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '>=', ColumnRef(columnName), AConst(StringValue(value1)));\n    } else if (value2 != null) {\n      return AExpr(0, '<=', ColumnRef(columnName), AConst(StringValue(value2)));\n    }\n\n    return null;\n  }\n\n  GetDate = (date, options) => {\n    const timeZone = (options && options.timeZone) || moment.tz.guess();\n\n    return moment(date || new Date()).tz(timeZone);\n  }\n\n  ConvertDateValue = (date) => {\n    if (date) {\n      return date.clone().toISOString();\n    }\n    return null;\n  }\n}\n"]}