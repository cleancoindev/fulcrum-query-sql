{"version":3,"sources":["../../src/ast/converter.js"],"names":["columnRef","column","isSQL","id","source","columnName","Converter","BooleanConverter","type","condition","options","args","nodeForExpressions","expressions","length","AndConverter","OrConverter","NotConverter","NotEmptyConverter","expression","EmptyConverter","EqualConverter","BinaryConverter","NotEqualConverter","GreaterThanConverter","GreaterThanOrEqualConverter","LessThanConverter","LessThanOrEqualConverter","BetweenConverter","value1","value2","isDateOperator","ConvertDateValue","GetDate","startOf","endOf","Between","NotBetweenConverter","NotBetween","InConverter","In","value","NotInConverter","values","map","ConstValue","v","kind","operator","scalarValue","FieldConverter","name","ConstantConverter","TextEqualConverter","TextNotEqualConverter","TextContainConverter","escapeLikePercent","TextNotContainConverter","TextStartsWithConverter","TextEndsWithConverter","TextMatchConverter","TextNotMatchConverter","ArrayAnyOfConverter","AnyOf","ArrayAllOfConverter","ArrayEqualConverter","a","b","SearchConverter","rhs","DynamicDateConverter","now","range","arrayValues","isInteger","isNumber","date","timeZone","tz","guess","Date","clone","toISOString","toAST","query","sort","pageSize","pageIndex","boundingBox","searchFilter","targetList","joins","joinColumnsWithSorting","o","join","fromClause","whereClause","sortClause","limitOffset","limitCount","toCountAST","joinColumns","toTileAST","ast","form","toHistogramAST","bucketSize","withClause","histogramWithClause","seriesFunctionSublinkSelect","seriesFunctionArgs","seriesFunctionCall","seriesFunction","bucketWidthFunctionCallArgs","bucketsSubqueryTargetList","bucketsSubqueryFromClause","bucketsSubqueryGroupClause","bucketsSubquerySortClause","bucketsSubquery","groupClause","bucketsSubselect","joinExpr","toDistinctValuesAST","valueColumn","isArray","push","by","recordsTargetList","datePartArgs","recordsFromClause","recordsSelect","recordsExpr","statsTargetList","statsFromClause","statsSelect","statsExpr","toSchemaAST","list","subJoinColumns","indexOf","schema","createdByColumn","updatedByColumn","assignedToColumn","projectColumn","leftJoins","exactColumns","baseQuery","queryAST","referencedColumns","concat","JSON","parse","stringify","SelectStmt","visitedTables","alias","leftJoinClause","tableName","sourceColumn","joinColumn","search","systemParts","filterNode","nodeForCondition","filter","boundingBoxFilter","trim","nodeForExpression","dateFilter","createExpressionForColumnFilter","statusFilter","projectFilter","assignmentFilter","columnSettings","columns","item","hasFilter","isValid","table","tableColumn","except","hasValues","hasNull","forEach","isEmptySet","replace","toTsQuery","dictionary","term","makeTsQueryCall","toLowerCase","terms","split","s","shift","tsQueries","ftsExpression","ilikeExpression","andArgs","e","converter","And","Or","Not","Empty","NotEmpty","Equal","NotEqual","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","NotIn","TextContain","TextNotContain","TextStartsWith","TextEndsWith","TextEqual","TextNotEqual","TextMatch","TextNotMatch","DateEqual","DateNotEqual","DateAfter","DateOnOrAfter","DateBefore","DateOnOrBefore","DateBetween","DateNotBetween","ArrayAnyOf","ArrayAllOf","ArrayEqual","Search","DateToday","DateYesterday","DateTomorrow","DateLast7Days","DateLast30Days","DateLast90Days","DateLastMonth","DateLastYear","DateNextWeek","DateNextMonth","DateNextYear","DateCurrentCalendarWeek","DateCurrentCalendarMonth","DateCurrentCalendarYear","DatePreviousCalendarWeek","DatePreviousCalendarMonth","DatePreviousCalendarYear","DateNextCalendarWeek","DateNextCalendarMonth","DateNextCalendarYear","DateDaysFromNow","DateWeeksFromNow","DateMonthsFromNow","DateYearsFromNow","DateDaysAgo","DateWeeksAgo","DateMonthsAgo","DateYearsAgo"],"mappings":"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","file":"converter.js","sourcesContent":["import { ColumnRef,\n         ResTarget,\n         AStar,\n         RangeVar,\n         SelectStmt,\n         BoolExpr,\n         NullTest,\n         AExpr,\n         AConst,\n         StringValue,\n         AArrayExpr,\n         IntegerValue,\n         FloatValue,\n         SortBy,\n         TypeCast,\n         TypeName,\n         FuncCall,\n         WindowDef,\n         RangeSubselect,\n         WithClause,\n         CommonTableExpr,\n         RangeFunction,\n         JoinExpr,\n         Alias,\n         CoalesceExpr,\n         SubLink } from './helpers';\n\nimport { ConditionType } from '../condition';\nimport { OperatorType, calculateDateRange } from '../operator';\nimport moment from 'moment-timezone';\n\nconst columnRef = (column) => {\n  return column.isSQL ? ColumnRef(column.id, column.source)\n                      : ColumnRef(column.columnName, column.source);\n};\n\nexport default class Converter {\n  toAST(query, {sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = this.targetList(query, sort, boundingBox);\n\n    const joins = query.joinColumnsWithSorting.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    const sortClause = sort;\n\n    const limitOffset = this.limitOffset(pageSize, pageIndex);\n\n    const limitCount = this.limitCount(pageSize);\n\n    return SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount});\n  }\n\n  toCountAST(query, {boundingBox, searchFilter}) {\n    const targetList = [ ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'total_count') ];\n\n    const joins = query.joinColumns.map(o => o.join);\n\n    const fromClause = this.fromClause(query, joins);\n\n    const whereClause = this.whereClause(query, boundingBox, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toTileAST(query, {searchFilter}) {\n    let targetList = null;\n\n    if (query.ast) {\n      const sort = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n      targetList = [\n        ResTarget(FuncCall('row_number', null, WindowDef(sort, 530)), '__id'),\n        ResTarget(ColumnRef('__geometry'))\n      ];\n    } else {\n      targetList = [\n        ResTarget(ColumnRef('_record_id'), 'id'),\n        ResTarget(ColumnRef('_geometry'), 'geometry'),\n        ResTarget(ColumnRef('_status'), 'status'),\n        ResTarget(TypeCast(TypeName('text'), AConst(StringValue(query.form.id))), 'form_id')\n      ];\n    }\n\n    const fromClause = this.fromClause(query);\n\n    const whereClause = this.whereClause(query, null, searchFilter);\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  toHistogramAST(query, {columnName, bucketSize, type, sort, pageSize, pageIndex, boundingBox, searchFilter}) {\n    const targetList = [\n      ResTarget(ColumnRef('series', 'series'), 'bucket'),\n      ResTarget(CoalesceExpr([ ColumnRef('count', 'sub'), AConst(IntegerValue(0)) ]), 'count'),\n      ResTarget(ColumnRef('min_value', 'sub'), 'min_value'),\n      ResTarget(ColumnRef('max_value', 'sub'), 'max_value'),\n      ResTarget(ColumnRef('avg_value', 'sub'), 'avg_value'),\n      ResTarget(ColumnRef('sum_value', 'sub'), 'sum_value')\n    ];\n\n    const withClause = this.histogramWithClause(columnName, bucketSize, type, query);\n\n    const seriesFunctionSublinkSelect = SelectStmt({\n      targetList: [ ResTarget(AExpr(0, '+', ColumnRef('buckets'), AConst(IntegerValue(1)))) ],\n      fromClause: [ RangeVar('__stats') ]\n    });\n\n    const seriesFunctionArgs = [\n      AConst(IntegerValue(1)),\n      SubLink(4, seriesFunctionSublinkSelect)\n    ];\n\n    const seriesFunctionCall = FuncCall('generate_series', seriesFunctionArgs);\n    const seriesFunction = RangeFunction([ [ seriesFunctionCall ] ], Alias('series'));\n\n    const bucketWidthFunctionCallArgs = [\n      TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef('value')),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('min_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('max_value')) ], fromClause: [ RangeVar('__stats') ]})),\n      SubLink(4, SelectStmt({targetList: [ ResTarget(ColumnRef('buckets')) ], fromClause: [ RangeVar('__stats') ]}))\n    ];\n\n    const bucketsSubqueryTargetList = [\n      ResTarget(FuncCall('width_bucket', bucketWidthFunctionCallArgs), 'bucket'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value'),\n      ResTarget(FuncCall('avg', [ ColumnRef('value') ]), 'avg_value'),\n      ResTarget(FuncCall('sum', [ ColumnRef('value') ]), 'sum_value')\n    ];\n\n    const bucketsSubqueryFromClause = [ RangeVar('__records') ];\n    const bucketsSubqueryGroupClause = [ AConst(IntegerValue(1)) ];\n    const bucketsSubquerySortClause = [ SortBy(AConst(IntegerValue(1)), 0, 0) ];\n\n    const bucketsSubquery = SelectStmt({\n      targetList: bucketsSubqueryTargetList,\n      fromClause: bucketsSubqueryFromClause,\n      groupClause: bucketsSubqueryGroupClause,\n      sortClause: bucketsSubquerySortClause\n    });\n\n    const bucketsSubselect = RangeSubselect(bucketsSubquery, Alias('sub'));\n\n    const joinExpr = JoinExpr(1,\n                              seriesFunction,\n                              bucketsSubselect,\n                              AExpr(0, '=', ColumnRef('series', 'series'), ColumnRef('bucket', 'sub')));\n\n    return SelectStmt({targetList, fromClause: [ joinExpr ], withClause});\n  }\n\n  toDistinctValuesAST(query, options = {}) {\n    const valueColumn = query.ast ? ColumnRef(options.column.id) : columnRef(options.column);\n\n    const targetList = options.column.isArray ? [ ResTarget(FuncCall('unnest', [ valueColumn ]), 'value') ]\n                                              : [ ResTarget(valueColumn, 'value') ];\n\n    targetList.push(ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'));\n\n    const joins = options.column.join ? [ options.column.join ] : null;\n\n    const fromClause = this.fromClause(query, joins, [ options.column ]);\n\n    // const whereClause = null; // options.all ? null : this.whereClause(query);\n    // TODO(zhm) need to pass the bbox and search here?\n    const whereClause = this.whereClause(query, null, null, options);\n\n    const groupClause = [ AConst(IntegerValue(1)) ];\n\n    const sortClause = [];\n\n    if (options.by === 'frequency') {\n      sortClause.push(SortBy(AConst(IntegerValue(2)), 2, 0));\n    }\n\n    sortClause.push(SortBy(AConst(IntegerValue(1)), 1, 0));\n\n    return SelectStmt({targetList, fromClause, whereClause, groupClause, sortClause});\n  }\n\n  histogramWithClause(columnName, bucketSize, type, query) {\n    let recordsTargetList = null;\n\n    if (type === 'date') {\n      const datePartArgs = [\n        AConst(StringValue('epoch')),\n        TypeCast(TypeName('date'), ColumnRef(columnName))\n      ];\n\n      recordsTargetList = [ ResTarget(FuncCall('date_part', datePartArgs), 'value') ];\n    } else {\n      recordsTargetList = [ ResTarget(TypeCast(TypeName([ StringValue('pg_catalog'), StringValue('float8') ]), ColumnRef(columnName)), 'value') ];\n    }\n\n    let recordsFromClause = null;\n\n    if (query.ast) {\n      recordsFromClause = [ RangeSubselect(query.ast, Alias('records')) ];\n    } else {\n      recordsFromClause = [ RangeVar(query.form.id + '/_full') ];\n    }\n\n    const recordsSelect = SelectStmt({targetList: recordsTargetList, fromClause: recordsFromClause});\n    const recordsExpr = CommonTableExpr('__records', recordsSelect);\n\n    const statsTargetList = [\n      ResTarget(AConst(IntegerValue(bucketSize)), 'buckets'),\n      ResTarget(FuncCall('count', [ AConst(IntegerValue(1)) ]), 'count'),\n      ResTarget(FuncCall('min', [ ColumnRef('value') ]), 'min_value'),\n      ResTarget(FuncCall('max', [ ColumnRef('value') ]), 'max_value')\n    ];\n\n    const statsFromClause = [ RangeVar('__records') ];\n    const statsSelect = SelectStmt({targetList: statsTargetList, fromClause: statsFromClause});\n    const statsExpr = CommonTableExpr('__stats', statsSelect);\n\n    return WithClause([ recordsExpr, statsExpr ]);\n  }\n\n  toSchemaAST(query) {\n    // wrap the query in a subquery with 1=0\n\n    const targetList = [ ResTarget(ColumnRef(AStar())) ];\n    const fromClause = [ RangeSubselect(query, Alias('wrapped')) ];\n    const whereClause = AExpr(0, '=', AConst(IntegerValue(0)), AConst(IntegerValue(1)));\n\n    return SelectStmt({targetList, fromClause, whereClause});\n  }\n\n  limitOffset(pageSize, pageIndex) {\n    if (pageSize != null && pageIndex != null) {\n      return AConst(IntegerValue(+pageIndex * +pageSize));\n    }\n\n    return null;\n  }\n\n  limitCount(pageSize) {\n    if (pageSize != null) {\n      return AConst(IntegerValue(+pageSize));\n    }\n\n    return null;\n  }\n\n  targetList(query, sort, boundingBox) {\n    const list = [\n      ResTarget(ColumnRef(AStar()))\n    ];\n\n    const subJoinColumns = query.joinColumnsWithSorting;\n\n    if (subJoinColumns.indexOf(query.schema.createdByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'created_by'), 'created_by.name'));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.updatedByColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'updated_by'), 'updated_by.name'));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.assignedToColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'assigned_to'), 'assigned_to.name'));\n    }\n\n    if (subJoinColumns.indexOf(query.schema.projectColumn) !== -1) {\n      list.push(ResTarget(ColumnRef('name', 'project'), 'project.name'));\n    }\n\n    list.push(ResTarget(FuncCall('row_number', null, WindowDef(sort, 530)), '_row_number'));\n\n    return list;\n  }\n\n  fromClause(query, leftJoins = [], exactColumns) {\n    let baseQuery = null;\n\n    if (query.ast) {\n      let queryAST = query.ast;\n\n      const referencedColumns = query.referencedColumns.concat(exactColumns || []);\n\n      // If there's an `exactColumn`, pick it out specifically with a guaranteed unique alias so it can be\n      // referenced with certainty in outer queries. The following is an oversimplified example of the problem:\n      //\n      // if `id` is part of the table and needs to be references in the outer query, it must be called out specifically:\n      //\n      // INVALID:\n      //   SELECT * FROM(SELECT *, *, * FROM table) WHERE id = ...\n      //\n      // VALID:\n      //   SELECT * FROM(SELECT *, *, *, id AS __value FROM table) WHERE __value = ...\n      //\n      // Given arbitrary subqueries, we must be able to reference columns in them exactly even when there are duplicates.\n      //\n      if (referencedColumns.length) {\n        queryAST = JSON.parse(JSON.stringify(queryAST));\n\n        for (const column of referencedColumns) {\n          queryAST.SelectStmt.targetList.push(ResTarget(ColumnRef(column.columnName, column.source), column.id));\n        }\n      }\n\n      return [ RangeSubselect(queryAST, Alias('records')) ];\n    }\n\n    baseQuery = RangeVar(query.form.id + '/_full', Alias('records'));\n\n    const visitedTables = {};\n\n    if (leftJoins) {\n      for (const join of leftJoins) {\n        if (!visitedTables[join.alias]) {\n          visitedTables[join.alias] = join;\n\n          baseQuery = Converter.leftJoinClause(baseQuery, join.tableName, join.alias, join.sourceColumn, join.joinColumn);\n        }\n      }\n    }\n\n    return [ baseQuery ];\n  }\n\n  whereClause(query, boundingBox, search, options = {}) {\n    const systemParts = [];\n    options = {...query.options || {}, ...options};\n\n    const filterNode = this.nodeForCondition(query.filter, options);\n\n    if (boundingBox) {\n      systemParts.push(this.boundingBoxFilter(query, boundingBox));\n    }\n\n    if (search && search.trim().length) {\n      systemParts.push(this.searchFilter(query, search));\n    }\n\n    systemParts.push(this.nodeForExpression(query.dateFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.statusFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.projectFilter, options));\n    systemParts.push(this.createExpressionForColumnFilter(query.assignmentFilter, options));\n\n    for (const item of query.columnSettings.columns) {\n      if (item.hasFilter) {\n        const expression = this.createExpressionForColumnFilter(item.filter, options);\n\n        if (expression) {\n          systemParts.push(expression);\n        }\n      }\n\n      if (item.search) {\n        if (item.column.isArray) {\n          systemParts.push(AExpr(8, '~~*', TypeCast(TypeName('text'), columnRef(item.column)),\n                                           AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        } else {\n          systemParts.push(AExpr(8, '~~*', columnRef(item.column),\n                                           AConst(StringValue('%' + this.escapeLikePercent(item.search) + '%'))));\n        }\n      }\n\n      if (item.expression.isValid) {\n        systemParts.push(this.nodeForExpression(item.expression, options));\n      }\n\n      if (item.range.isValid) {\n        systemParts.push(this.nodeForExpression(item.range, options));\n      }\n    }\n\n    const expressions = systemParts.filter(o => o != null);\n\n    if (filterNode && expressions.length) {\n      return BoolExpr(0, [ filterNode, ...expressions ]);\n    } else if (expressions.length) {\n      return BoolExpr(0, [ ...expressions ]);\n    }\n\n    return filterNode;\n  }\n\n  static leftJoinClause(baseQuery, table, alias, sourceColumn, tableColumn) {\n    return JoinExpr(1,\n                    baseQuery,\n                    RangeVar(table, Alias(alias)),\n                    AExpr(0, '=', ColumnRef(sourceColumn, 'records'), ColumnRef(tableColumn, alias)));\n  }\n\n  createExpressionForColumnFilter(filter, options) {\n    let expression = null;\n\n    if (filter === options.except) {\n      return null;\n    }\n\n    if (filter.hasValues) {\n      let hasNull = false;\n      const values = [];\n\n      filter.value.forEach(v => {\n        if (v != null) {\n          values.push(v);\n        } else {\n          hasNull = true;\n        }\n      });\n\n      if (values.length) {\n        if (filter.column.isArray) {\n          expression = this.AnyOf(filter.column, values);\n        } else {\n          expression = this.In(filter.column, values);\n        }\n\n        if (hasNull) {\n          expression = BoolExpr(1, [ NullTest(0, columnRef(filter.column)), expression ]);\n        }\n      } else if (hasNull) {\n        expression = NullTest(0, columnRef(filter.column));\n      }\n    } else if (filter.isEmptySet) {\n      // add 1 = 0 clause to return 0 rows\n      expression = AExpr(0, '=', AConst(IntegerValue(1)),\n                                 AConst(IntegerValue(0)));\n    }\n\n    return expression;\n  }\n\n  boundingBoxFilter(query, boundingBox) {\n    const args = [\n      AConst(FloatValue(boundingBox[0])),\n      AConst(FloatValue(boundingBox[1])),\n      AConst(FloatValue(boundingBox[2])),\n      AConst(FloatValue(boundingBox[3])),\n      AConst(IntegerValue(4326))\n    ];\n\n    const rhs = FuncCall('st_makeenvelope', args);\n\n    const columnName = query.ast ? '__geometry' : '_geometry';\n\n    return AExpr(0, '&&', ColumnRef(columnName), rhs);\n  }\n\n  escapeLikePercent(value) {\n    return value.replace(/\\%/g, '\\\\%').replace(/_/g, '\\\\_%');\n  }\n\n  searchFilter(query, search) {\n    /*\n       Search takes the general form:\n\n       SELECT ...\n       FROM ...\n       WHERE\n         _record_index @@ to_tsquery('english', '''bacon'':*'::tsquery::text) AND\n         _record_index_text ILIKE '%bacon%'\n\n       NB: The awkward cast through a text type is to properly escape raw user input as a tsquery.\n\n       For example:\n         to_tsquery('Nor:*') vs 'Nor:*'::tsquery\n\n       Also, the ILIKE handles further reduces the resultset to exact matches which is what Fulcrum\n       users more often expect. The general idea is to use the FTS index to massively reduce the result\n       set before applying the much slower ILIKE operation. So, we can reduce the result very quickly\n       with the tsvector index first, and then only run the ILIKE on what's left.\n    */\n\n    search = search.trim();\n\n    // if it's a fully custom SQL statement, use a simpler form with no index\n    if (query.ast) {\n      return AExpr(8, '~~*', TypeCast(TypeName('text'), ColumnRef('records')),\n                             AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n    }\n\n    const toTsQuery = (dictionary, term) => {\n      const args = [ AConst(StringValue(dictionary)), AConst(StringValue(\"'\" + term + \"':*\")) ];\n\n      return FuncCall('to_tsquery', args);\n    };\n\n    const makeTsQueryCall = (term) => {\n      return toTsQuery(term.length > 3 ? 'english' : 'simple',\n                       term.toLowerCase().replace(/'/g, \"''\"));\n    };\n\n    const terms = search.split(' ').filter(s => s.trim().length);\n\n    let term = terms.shift();\n\n    let tsQueries = makeTsQueryCall(term);\n\n    while (terms.length) {\n      term = terms.shift();\n      tsQueries = AExpr(0, '&&', tsQueries, makeTsQueryCall(term));\n    }\n\n    const ftsExpression = AExpr(0, '@@', ColumnRef('_record_index'), tsQueries);\n\n    const ilikeExpression = AExpr(8, '~~*', ColumnRef('_record_index_text'),\n                                  AConst(StringValue('%' + this.escapeLikePercent(search) + '%')));\n\n    const andArgs = [\n      ftsExpression,\n      ilikeExpression\n    ];\n\n    return BoolExpr(0, andArgs);\n  }\n\n  nodeForExpressions(expressions, options) {\n    return expressions.map(e => this.nodeForExpression(e, options))\n                      .filter(e => e);\n  }\n\n  nodeForCondition(condition, options) {\n    const converter = {\n      [ConditionType.And]: this.AndConverter,\n      [ConditionType.Or]: this.OrConverter,\n      [ConditionType.Not]: this.NotConverter\n    };\n\n    return converter[condition.type](condition, options);\n  }\n\n  nodeForExpression(expression, options) {\n    if (expression.expressions) {\n      return this.nodeForCondition(expression, options);\n    }\n\n    if (expression === options.except) {\n      return null;\n    }\n\n    const converter = {\n      [OperatorType.Empty.name]: this.EmptyConverter,\n      [OperatorType.NotEmpty.name]: this.NotEmptyConverter,\n      [OperatorType.Equal.name]: this.EqualConverter,\n      [OperatorType.NotEqual.name]: this.NotEqualConverter,\n      [OperatorType.GreaterThan.name]: this.GreaterThanConverter,\n      [OperatorType.GreaterThanOrEqual.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.LessThan.name]: this.LessThanConverter,\n      [OperatorType.LessThanOrEqual.name]: this.LessThanOrEqualConverter,\n      [OperatorType.Between.name]: this.BetweenConverter,\n      [OperatorType.NotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.In.name]: this.InConverter,\n      [OperatorType.NotIn.name]: this.NotInConverter,\n      [OperatorType.TextContain.name]: this.TextContainConverter,\n      [OperatorType.TextNotContain.name]: this.TextNotContainConverter,\n      [OperatorType.TextStartsWith.name]: this.TextStartsWithConverter,\n      [OperatorType.TextEndsWith.name]: this.TextEndsWithConverter,\n      [OperatorType.TextEqual.name]: this.TextEqualConverter,\n      [OperatorType.TextNotEqual.name]: this.TextNotEqualConverter,\n      [OperatorType.TextMatch.name]: this.TextMatchConverter,\n      [OperatorType.TextNotMatch.name]: this.TextNotMatchConverter,\n      [OperatorType.DateEqual.name]: this.EqualConverter,\n      [OperatorType.DateNotEqual.name]: this.NotEqualConverter,\n      [OperatorType.DateAfter.name]: this.GreaterThanConverter,\n      [OperatorType.DateOnOrAfter.name]: this.GreaterThanOrEqualConverter,\n      [OperatorType.DateBefore.name]: this.LessThanConverter,\n      [OperatorType.DateOnOrBefore.name]: this.LessThanOrEqualConverter,\n      [OperatorType.DateBetween.name]: this.BetweenConverter,\n      [OperatorType.DateNotBetween.name]: this.NotBetweenConverter,\n      [OperatorType.ArrayAnyOf.name]: this.ArrayAnyOfConverter,\n      [OperatorType.ArrayAllOf.name]: this.ArrayAllOfConverter,\n      [OperatorType.ArrayEqual.name]: this.ArrayEqualConverter,\n      [OperatorType.Search.name]: this.SearchConverter,\n      [OperatorType.DateToday.name]: this.DynamicDateConverter,\n      [OperatorType.DateYesterday.name]: this.DynamicDateConverter,\n      [OperatorType.DateTomorrow.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast7Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast30Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLast90Days.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateLastYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateCurrentCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DatePreviousCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarWeek.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarMonth.name]: this.DynamicDateConverter,\n      [OperatorType.DateNextCalendarYear.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsFromNow.name]: this.DynamicDateConverter,\n      [OperatorType.DateDaysAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateWeeksAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateMonthsAgo.name]: this.DynamicDateConverter,\n      [OperatorType.DateYearsAgo.name]: this.DynamicDateConverter\n    };\n\n    if (!expression.isValid) {\n      return null;\n    }\n\n    return converter[expression.operator](expression, options);\n  }\n\n  BooleanConverter = (type, condition, options) => {\n    const args = this.nodeForExpressions(condition.expressions, options);\n\n    if (args && args.length) {\n      return BoolExpr(type, args);\n    }\n\n    return null;\n  }\n\n  AndConverter = (condition, options) => {\n    return this.BooleanConverter(0, condition, options);\n  }\n\n  OrConverter = (condition, options) => {\n    return this.BooleanConverter(1, condition, options);\n  }\n\n  NotConverter = (condition, options) => {\n    if (condition.expressions.length > 1) {\n      return BoolExpr(2, [ this.BooleanConverter(0, condition, options) ]);\n    }\n\n    return this.BooleanConverter(2, condition, options);\n  }\n\n  NotEmptyConverter = (expression) => {\n    return NullTest(1, columnRef(expression.column));\n  }\n\n  EmptyConverter = (expression) => {\n    return NullTest(0, columnRef(expression.column));\n  }\n\n  EqualConverter = (expression) => {\n    return this.BinaryConverter(0, '=', expression);\n  }\n\n  NotEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<>', expression);\n  }\n\n  GreaterThanConverter = (expression) => {\n    return this.BinaryConverter(0, '>', expression);\n  }\n\n  GreaterThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '>=', expression);\n  }\n\n  LessThanConverter = (expression) => {\n    return this.BinaryConverter(0, '<', expression);\n  }\n\n  LessThanOrEqualConverter = (expression) => {\n    return this.BinaryConverter(0, '<=', expression);\n  }\n\n  BetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options).endOf('day'));\n    }\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetweenConverter = (expression, options) => {\n    let value1 = expression.value1;\n    let value2 = expression.value2;\n\n    if (expression.isDateOperator) {\n      value1 = value1 && this.ConvertDateValue(this.GetDate(value1, options).startOf('day'));\n      value2 = value2 && this.ConvertDateValue(this.GetDate(value2, options).endOf('day'));\n    }\n\n    return this.NotBetween(expression.column, value1, value2);\n  }\n\n  InConverter = (expression) => {\n    return this.In(expression.column, expression.value);\n  }\n\n  NotInConverter = (expression) => {\n    const values = expression.value.map(v => this.ConstValue(expression.column, v));\n\n    return AExpr(6, '<>', columnRef(expression.column),\n                 values);\n  }\n\n  BinaryConverter = (kind, operator, expression) => {\n    return AExpr(kind, operator, columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  FieldConverter = (expression) => {\n    return ColumnRef(expression.name);\n  }\n\n  ConstantConverter = (expression) => {\n    return this.ConstValue(expression.column, expression.scalarValue);\n  }\n\n  TextEqualConverter = (expression) => {\n    return AExpr(8, '~~*', columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextNotEqualConverter = (expression) => {\n    return AExpr(8, '!~~*', columnRef(expression.column),\n                 this.ConstValue(expression.column, expression.scalarValue));\n  }\n\n  TextContainConverter = (expression) => {\n    return AExpr(8, '~~*', columnRef(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextNotContainConverter = (expression) => {\n    return AExpr(8, '!~~*', columnRef(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextStartsWithConverter = (expression) => {\n    return AExpr(8, '~~*', columnRef(expression.column),\n                 AConst(StringValue(this.escapeLikePercent(expression.scalarValue) + '%')));\n  }\n\n  TextEndsWithConverter = (expression) => {\n    return AExpr(8, '~~*', columnRef(expression.column),\n                 AConst(StringValue('%' + this.escapeLikePercent(expression.scalarValue))));\n  }\n\n  TextMatchConverter = (expression) => {\n    return AExpr(0, '~*', columnRef(expression.column),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  TextNotMatchConverter = (expression) => {\n    return AExpr(0, '!~*', columnRef(expression.column),\n                 AConst(StringValue(expression.scalarValue)));\n  }\n\n  ArrayAnyOfConverter = (expression) => {\n    return this.AnyOf(expression.column, expression.value);\n  }\n\n  ArrayAllOfConverter = (expression) => {\n    const values = AArrayExpr(expression.value.map(v => this.ConstValue(expression.column, v)));\n\n    return AExpr(0, '@>', columnRef(expression.column),\n                 values);\n  }\n\n  ArrayEqualConverter = (expression) => {\n    const values = AArrayExpr(expression.value.map(v => this.ConstValue(expression.column, v)));\n\n    const a = AExpr(0, '<@', columnRef(expression.column),\n                    values);\n\n    const b = AExpr(0, '@>', columnRef(expression.column),\n                    values);\n\n    return BoolExpr(0, [ a, b ]);\n  }\n\n  SearchConverter = (expression) => {\n    const rhs = FuncCall('to_tsquery', [ this.ConstValue(expression.column, expression.scalarValue) ]);\n\n    return AExpr(0, '@@', columnRef(expression.column),\n                 rhs);\n  }\n\n  DynamicDateConverter = (expression, options) => {\n    // Let the caller specify the timezone to be used for dynamic date calculations. This\n    // makes sure when the browser calculates a dynamic range, the server would calculate\n    // the same range. So 'Today' is midnight to midnight in the user's local time. It would\n    // be much less useful and confusing if we forced \"Today\" to always be London's today.\n    const now = this.GetDate(null, options);\n\n    const range = calculateDateRange(expression.operator, expression.value, now);\n\n    const value1 = this.ConvertDateValue(range[0]);\n    const value2 = this.ConvertDateValue(range[1]);\n\n    return this.Between(expression.column, value1, value2);\n  }\n\n  NotBetween = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(11, 'NOT BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '<', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '>', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  AnyOf = (column, values) => {\n    const arrayValues = AArrayExpr(values.map(v => this.ConstValue(column, v)));\n\n    return AExpr(0, '&&', columnRef(column), arrayValues);\n  }\n\n  In = (column, values) => {\n    const arrayValues = values.map(v => this.ConstValue(column, v));\n\n    return AExpr(6, '=', columnRef(column), arrayValues);\n  }\n\n  Between = (column, value1, value2) => {\n    if (value1 != null && value2 != null) {\n      return AExpr(10, 'BETWEEN', columnRef(column), [ this.ConstValue(column, value1), this.ConstValue(column, value2) ]);\n    } else if (value1 != null) {\n      return AExpr(0, '>=', columnRef(column), this.ConstValue(column, value1));\n    } else if (value2 != null) {\n      return AExpr(0, '<=', columnRef(column), this.ConstValue(column, value2));\n    }\n\n    return null;\n  }\n\n  ConstValue = (column, value) => {\n    if (value == null) {\n      return null;\n    }\n\n    if (column.isInteger) {\n      return AConst(IntegerValue(value));\n    }\n\n    if (column.isNumber) {\n      return AConst(FloatValue(value));\n    }\n\n    return AConst(StringValue(value));\n  }\n\n  GetDate = (date, options) => {\n    const timeZone = (options && options.timeZone) || moment.tz.guess();\n\n    return moment(date || new Date()).tz(timeZone);\n  }\n\n  ConvertDateValue = (date) => {\n    if (date) {\n      return date.clone().toISOString();\n    }\n    return null;\n  }\n}\n"]}