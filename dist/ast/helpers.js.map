{"version":3,"sources":["../../src/ast/helpers.js"],"names":["SelectStmt","StringValue","IntegerValue","FloatValue","Alias","RangeVar","ResTarget","FuncCall","WindowDef","ColumnRef","TypeCast","TypeName","JoinExpr","AConst","AStar","BoolExpr","AExpr","RangeSubselect","AArrayExpr","SortBy","NullTest","WithClause","CommonTableExpr","RangeFunction","SubLink","CoalesceExpr","targetList","fromClause","whereClause","sortClause","limitOffset","limitCount","groupClause","withClause","op","value","String","str","toString","Integer","ival","Float","name","aliasname","alias","relname","inhOpt","relpersistence","node","val","args","over","funcname","Array","isArray","orderClause","frameOptions","source","nameValue","fields","typeName","arg","names","mod","typemod","type","larg","rarg","quals","jointype","A_Const","A_Star","boolop","kind","lexpr","rexpr","A_Expr","subquery","values","A_ArrayExpr","elements","direction","nulls","sortby_dir","sortby_nulls","nulltesttype","ctes","query","ctename","ctequery","functions","subselect","subLinkType"],"mappings":"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","file":"helpers.js","sourcesContent":["export function SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount, groupClause, withClause}) {\n  return {\n    SelectStmt: {\n      targetList: targetList,\n      fromClause: fromClause,\n      whereClause: whereClause,\n      sortClause: sortClause,\n      limitOffset: limitOffset,\n      limitCount: limitCount,\n      groupClause: groupClause,\n      withClause: withClause,\n      op: 0\n    }\n  };\n}\n\nexport function StringValue(value) {\n  return {\n    String: {\n      str: value != null ? value.toString() : null\n    }\n  };\n}\n\nexport function IntegerValue(value) {\n  return {\n    Integer: {\n      ival: value != null ? +value : null\n    }\n  };\n}\n\nexport function FloatValue(value) {\n  return {\n    Float: {\n      str: value != null ? value.toString() : ''\n    }\n  };\n}\n\nexport function Alias(name) {\n  return {\n    Alias: {\n      aliasname: name\n    }\n  };\n}\n\nexport function RangeVar(name, alias) {\n  return {\n    RangeVar: {\n      relname: name,\n      inhOpt: 2,\n      relpersistence: 'p',\n      alias: alias\n    }\n  };\n}\n\nexport function ResTarget(node, name = null) {\n  return {\n    ResTarget: {\n      name: name,\n      val: node\n    }\n  };\n}\n\nexport function FuncCall(name, args, over) {\n  return {\n    FuncCall: {\n      funcname: Array.isArray(name) ? name : [ StringValue(name) ],\n      args: args,\n      over: over\n    }\n  };\n}\n\nexport function WindowDef(orderClause, frameOptions) {\n  return {\n    WindowDef: {\n      orderClause: orderClause,\n      frameOptions: frameOptions\n    }\n  };\n}\n\nexport function ColumnRef(name, source) {\n  const nameValue = typeof name === 'string' ? StringValue(name) : name;\n\n  const fields = source ? [ StringValue(source), nameValue ]\n                        : [ nameValue ];\n\n  return {\n    ColumnRef: {\n      fields: fields\n    }\n  };\n}\n\nexport function TypeCast(typeName, arg) {\n  return {\n    TypeCast: {\n      arg: arg,\n      typeName: typeName\n    }\n  };\n}\n\nexport function TypeName(names, mod) {\n  return {\n    TypeName: {\n      names: typeof names === 'string' ? [ StringValue(names) ] : names,\n      typemod: mod\n    }\n  };\n}\n\nexport function JoinExpr(type, larg, rarg, quals) {\n  return {\n    JoinExpr: {\n      jointype: type,\n      larg: larg,\n      rarg: rarg,\n      quals: quals\n    }\n  };\n}\n\nexport function AConst(value) {\n  return {\n    A_Const: {\n      val: value\n    }\n  };\n}\n\nexport function AStar() {\n  return {\n    A_Star: {}\n  };\n}\n\nexport function BoolExpr(op, args) {\n  return {\n    BoolExpr: {\n      boolop: op,\n      args: args\n    }\n  };\n}\n\nexport function AExpr(kind, name, lexpr, rexpr) {\n  return {\n    A_Expr: {\n      kind: kind,\n      name: [ StringValue(name) ],\n      lexpr: lexpr,\n      rexpr: rexpr\n    }\n  };\n}\n\nexport function RangeSubselect(subquery, alias) {\n  return {\n    RangeSubselect: {\n      subquery: subquery,\n      alias: alias\n    }\n  };\n}\n\nexport function AArrayExpr(values) {\n  return {\n    A_ArrayExpr: {\n      elements: values\n    }\n  };\n}\n\nexport function SortBy(node, direction, nulls) {\n  return {\n    SortBy: {\n      node: node,\n      sortby_dir: direction,\n      sortby_nulls: nulls\n    }\n  };\n}\n\n// 0 : IS NULL\n// 1 : IS NOT NULL\nexport function NullTest(type, arg) {\n  return {\n    NullTest: {\n      arg: arg,\n      nulltesttype: type\n    }\n  };\n}\n\nexport function WithClause(ctes) {\n  return {\n    WithClause: {\n      ctes: ctes\n    }\n  };\n}\n\nexport function CommonTableExpr(name, query) {\n  return {\n    CommonTableExpr: {\n      ctename: name,\n      ctequery: query\n    }\n  };\n}\n\nexport function RangeFunction(functions, alias) {\n  return {\n    RangeFunction: {\n      functions: functions,\n      alias: alias\n    }\n  };\n}\n\nexport function SubLink(type, subselect) {\n  return {\n    SubLink: {\n      subLinkType: type,\n      subselect: subselect\n    }\n  };\n}\n\nexport function CoalesceExpr(args) {\n  return {\n    CoalesceExpr: {\n      args: args\n    }\n  };\n}\n"]}