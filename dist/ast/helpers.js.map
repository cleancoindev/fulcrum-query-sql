{"version":3,"sources":["../../src/ast/helpers.js"],"names":["SelectStmt","targetList","fromClause","whereClause","sortClause","limitOffset","limitCount","groupClause","withClause","op","StringValue","value","String","str","toString","IntegerValue","Integer","ival","FloatValue","Float","Alias","name","aliasname","RangeVar","alias","relname","inhOpt","relpersistence","ResTarget","node","val","FuncCall","args","options","funcname","Array","isArray","WindowDef","orderClause","frameOptions","ColumnRef","source","nameValue","fields","TypeCast","typeName","arg","TypeName","names","mod","typemod","JoinExpr","type","larg","rarg","quals","jointype","AConst","A_Const","AStar","A_Star","BoolExpr","boolop","AExpr","kind","lexpr","rexpr","A_Expr","RangeSubselect","subquery","AArrayExpr","values","A_ArrayExpr","elements","SortBy","direction","nulls","sortby_dir","sortby_nulls","NullTest","nulltesttype","WithClause","ctes","CommonTableExpr","query","ctename","ctequery","RangeFunction","functions","SubLink","subselect","subLinkType","CoalesceExpr"],"mappings":"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","sourcesContent":["export function SelectStmt({targetList, fromClause, whereClause, sortClause, limitOffset, limitCount, groupClause, withClause}) {\n  return {\n    SelectStmt: {\n      targetList: targetList,\n      fromClause: fromClause,\n      whereClause: whereClause,\n      sortClause: sortClause,\n      limitOffset: limitOffset,\n      limitCount: limitCount,\n      groupClause: groupClause,\n      withClause: withClause,\n      op: 0\n    }\n  };\n}\n\nexport function StringValue(value) {\n  return {\n    String: {\n      str: value != null ? value.toString() : null\n    }\n  };\n}\n\nexport function IntegerValue(value) {\n  return {\n    Integer: {\n      ival: value != null ? +value : null\n    }\n  };\n}\n\nexport function FloatValue(value) {\n  return {\n    Float: {\n      str: value != null ? value.toString() : ''\n    }\n  };\n}\n\nexport function Alias(name) {\n  return {\n    Alias: {\n      aliasname: name\n    }\n  };\n}\n\nexport function RangeVar(name, alias) {\n  return {\n    RangeVar: {\n      relname: name,\n      inhOpt: 2,\n      relpersistence: 'p',\n      alias: alias\n    }\n  };\n}\n\nexport function ResTarget(node, name = null) {\n  return {\n    ResTarget: {\n      name: name,\n      val: node\n    }\n  };\n}\n\nexport function FuncCall(name, args, options) {\n  return {\n    FuncCall: {\n      funcname: Array.isArray(name) ? name : [ StringValue(name) ],\n      args: args,\n      ...options\n    }\n  };\n}\n\nexport function WindowDef(orderClause, frameOptions) {\n  return {\n    WindowDef: {\n      orderClause: orderClause,\n      frameOptions: frameOptions\n    }\n  };\n}\n\nexport function ColumnRef(name, source) {\n  const nameValue = typeof name === 'string' ? StringValue(name) : name;\n\n  const fields = source ? [ StringValue(source), nameValue ]\n                        : [ nameValue ];\n\n  return {\n    ColumnRef: {\n      fields: fields\n    }\n  };\n}\n\nexport function TypeCast(typeName, arg) {\n  return {\n    TypeCast: {\n      arg: arg,\n      typeName: typeName\n    }\n  };\n}\n\nexport function TypeName(names, mod) {\n  return {\n    TypeName: {\n      names: typeof names === 'string' ? [ StringValue(names) ] : names,\n      typemod: mod\n    }\n  };\n}\n\nexport function JoinExpr(type, larg, rarg, quals) {\n  return {\n    JoinExpr: {\n      jointype: type,\n      larg: larg,\n      rarg: rarg,\n      quals: quals\n    }\n  };\n}\n\nexport function AConst(value) {\n  return {\n    A_Const: {\n      val: value\n    }\n  };\n}\n\nexport function AStar() {\n  return {\n    A_Star: {}\n  };\n}\n\nexport function BoolExpr(op, args) {\n  return {\n    BoolExpr: {\n      boolop: op,\n      args: args\n    }\n  };\n}\n\nexport function AExpr(kind, name, lexpr, rexpr) {\n  return {\n    A_Expr: {\n      kind: kind,\n      name: [ StringValue(name) ],\n      lexpr: lexpr,\n      rexpr: rexpr\n    }\n  };\n}\n\nexport function RangeSubselect(subquery, alias) {\n  return {\n    RangeSubselect: {\n      subquery: subquery,\n      alias: alias\n    }\n  };\n}\n\nexport function AArrayExpr(values) {\n  return {\n    A_ArrayExpr: {\n      elements: values\n    }\n  };\n}\n\nexport function SortBy(node, direction, nulls) {\n  return {\n    SortBy: {\n      node: node,\n      sortby_dir: direction,\n      sortby_nulls: nulls\n    }\n  };\n}\n\n// 0 : IS NULL\n// 1 : IS NOT NULL\nexport function NullTest(type, arg) {\n  return {\n    NullTest: {\n      arg: arg,\n      nulltesttype: type\n    }\n  };\n}\n\nexport function WithClause(ctes) {\n  return {\n    WithClause: {\n      ctes: ctes\n    }\n  };\n}\n\nexport function CommonTableExpr(name, query) {\n  return {\n    CommonTableExpr: {\n      ctename: name,\n      ctequery: query\n    }\n  };\n}\n\nexport function RangeFunction(functions, alias) {\n  return {\n    RangeFunction: {\n      functions: functions,\n      alias: alias\n    }\n  };\n}\n\nexport function SubLink(type, subselect) {\n  return {\n    SubLink: {\n      subLinkType: type,\n      subselect: subselect\n    }\n  };\n}\n\nexport function CoalesceExpr(args) {\n  return {\n    CoalesceExpr: {\n      args: args\n    }\n  };\n}\n"],"file":"helpers.js"}