{"version":3,"sources":["../src/expression.js"],"names":["Expression","attrs","schema","_field","field","_operator","operator","_value","value","_schema","toggleValue","containsValue","without","push","find","o","toString","toLowerCase","indexOf","toJSON","isEqual","other","JSON","stringify","availableOperators","column","hasValue","length","columnForFieldKey","id","name","columnName","_expressions"],"mappings":"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","file":"expression.js","sourcesContent":["import _ from 'lodash';\n\nimport { availableOperatorsForColumn, isValueRequired } from './operator';\n\nexport class Expression {\n  constructor(attrs, schema) {\n    this._field = attrs.field || null;\n    this._operator = attrs.operator || null;\n    this._value = attrs.value || null;\n    this._schema = schema;\n  }\n\n  get isValid() {\n    if (!isValueRequired(this.operator)) {\n      return this.column && this.operator;\n    }\n\n    return this.column && this.operator && this.hasValue;\n  }\n\n  get supportsValue() {\n    return isValueRequired(this.operator);\n  }\n\n  get hasValue() {\n    return this.value !== null && this.value.length;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get scalarValue() {\n    if (this.hasValue) {\n      return this.value[0];\n    }\n\n    return null;\n  }\n\n  set scalarValue(value) {\n    this._value = value ? [ value ] : null;\n  }\n\n  get operator() {\n    return this._operator;\n  }\n\n  set operator(operator) {\n    this._operator = operator;\n  }\n\n  get field() {\n    return this._field;\n  }\n\n  get column() {\n    return this._schema.columnForFieldKey(this.field);\n  }\n\n  set column(column) {\n    this._field = column ? column.id : null;\n\n    // if the change in the field results in the operator not being valid, clear the operator\n    if (this._operator && this.availableOperators().find(o => o.name === this._operator) === -1) {\n      this._operator = null;\n    }\n  }\n\n  get columnName() {\n    if (this.column) {\n      return this.column.columnName;\n    }\n    return null;\n  }\n\n  get expressions() {\n    return this._expressions;\n  }\n\n  toggleValue(value) {\n    if (!this._value) {\n      this._value = [];\n    }\n\n    if (this.containsValue(value)) {\n      this._value = _.without(this.value, value);\n    } else {\n      this._value.push(value);\n    }\n  }\n\n  containsValue(value) {\n    if (this.value == null) {\n      return false;\n    }\n\n    return this.value.find(o => o.toString().toLowerCase().indexOf(value.toString().toLowerCase()) > -1);\n  }\n\n  toJSON() {\n    return {\n      field: this._field,\n      operator: this._operator,\n      value: this._value\n    };\n  }\n\n  isEqual(other) {\n    if (other == null || !(other instanceof Expression)) {\n      return false;\n    }\n\n    return this.field === other.field &&\n           this.operator === other.operator &&\n           JSON.stringify(this.value) === JSON.stringify(other.value);\n  }\n\n  availableOperators() {\n    return availableOperatorsForColumn(this.column);\n  }\n}\n"]}