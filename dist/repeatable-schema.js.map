{"version":3,"sources":["../src/repeatable-schema.js"],"names":["SYSTEM_COLUMNS","RepeatableSchema","form","repeatable","rawColumns","_columns","_rawColumns","_rawColumnsByKey","_columnsByKey","column","indexOf","name","field","setupColumns","addSystemColumn","label","attribute","columnName","push","statusField","isEnabled","columnObject","_status","elementsForColumns","element","isHidden","hasHiddenParent","key","Error","findColumnByID","id","columns","find","e","columnForFieldKey","fieldKey","_allElements","flattenElements","_elementsForColumns","elements","allElements","skip","isSectionElement","isRepeatableElement","isLabelElement"],"mappings":"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","file":"repeatable-schema.js","sourcesContent":["import ElementColumn from './schema/element-column';\nimport SimpleColumn from './schema/simple-column';\n\nconst SYSTEM_COLUMNS = [\n  '_child_record_id',\n  '_record_id',\n  '_parent_id',\n  '_record_project_id',\n  '_record_assigned_to_id',\n  '_record_status',\n  '_index',\n  '_latitude',\n  '_longitude',\n  '_created_at',\n  '_updated_at',\n  '_version',\n  '_created_by_id',\n  '_updated_by_id',\n  '_server_created_at',\n  '_server_updated_at',\n  '_geometry',\n  '_changeset_id',\n  '_title',\n  '_created_latitude',\n  '_created_longitude',\n  '_created_geometry',\n  '_created_altitude',\n  '_created_horizontal_accuracy',\n  '_updated_latitude',\n  '_updated_longitude',\n  '_updated_geometry',\n  '_updated_altitude',\n  '_updated_horizontal_accuracy',\n  '_created_duration',\n  '_updated_duration',\n  '_edited_duration'\n];\n\nexport default class RepeatableSchema {\n  constructor(form, repeatable, rawColumns) {\n    this.form = form;\n    this.repeatable = repeatable;\n\n    this._columns = [];\n    this._rawColumns = rawColumns;\n\n    this._rawColumnsByKey = {};\n    this._columnsByKey = {};\n\n    for (const column of rawColumns) {\n      if (SYSTEM_COLUMNS.indexOf(column.name) !== -1) {\n        this._rawColumnsByKey[column.name] = column;\n      } else if (column.field) {\n        this._rawColumnsByKey[column.field] = column;\n      }\n    }\n\n    this.setupColumns();\n  }\n\n  addSystemColumn(label, attribute, columnName) {\n    const column = new SimpleColumn(label, attribute, columnName);\n    this._columns.push(column);\n    this._columnsByKey[columnName] = column;\n  }\n\n  setupColumns() {\n    if (this.form.statusField.isEnabled) {\n      const columnObject = new ElementColumn(this.form.statusField,\n                                             this._rawColumnsByKey._status,\n                                             '_status');\n\n      this._columns.push(columnObject);\n\n      this._columnsByKey._status = columnObject;\n    }\n\n    this.addSystemColumn('Version', 'version', '_version');\n    this.addSystemColumn('Created', 'createdAt', '_server_created_at');\n    this.addSystemColumn('Updated', 'updatedAt', '_server_updated_at');\n    this.addSystemColumn('Created By', 'createdBy', '_created_by_id');\n    this.addSystemColumn('Updated By', 'updatedBy', '_updated_by_id');\n\n    // if (this.form.isAssignmentEnabled) {\n    //   this.addSystemColumn('Assigned', 'assignedTo', '_assigned_to_id');\n    // }\n\n    // if (this.form.isProjectEnabled) {\n    //   this.addSystemColumn('Project', 'project', '_project_id');\n    // }\n\n    for (const element of this.elementsForColumns) {\n      if (element.isHidden || element.hasHiddenParent) {\n        continue;\n      }\n\n      const column = this._rawColumnsByKey[element.key];\n\n      if (column == null) {\n        throw new Error('Column not found for element ' + element.key);\n      }\n\n      const columnObject = new ElementColumn(element, column);\n\n      this._columns.push(columnObject);\n\n      this._columnsByKey[element.key] = columnObject;\n    }\n  }\n\n  findColumnByID(id) {\n    return this.columns.find(e => e.id === id);\n  }\n\n  columnForFieldKey(fieldKey) {\n    return this._columnsByKey[fieldKey];\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  get allElements() {\n    if (!this._allElements) {\n      this._allElements = this.repeatable.flattenElements(false);\n    }\n    return this._allElements;\n  }\n\n  get elementsForColumns() {\n    if (!this._elementsForColumns) {\n      this._elementsForColumns = [];\n\n      const elements = this.allElements;\n\n      for (const element of elements) {\n        const skip = element.isSectionElement ||\n                     element.isRepeatableElement ||\n                     element.isLabelElement ||\n                     element.isHidden;\n\n        if (!skip) {\n          this._elementsForColumns.push(element);\n        }\n      }\n    }\n\n    return this._elementsForColumns;\n  }\n}\n"]}