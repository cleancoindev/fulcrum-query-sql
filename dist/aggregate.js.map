{"version":3,"sources":["../src/aggregate.js"],"names":["AggregateType","Sum","name","label","Average","Median","Min","Max","StdDev","Histogram","Empty","count","NotEmpty","Unique","PercentEmpty","PercentNotEmpty","PercentUnique","AggregatesByValue","Object","keys","key","TEXTUAL_AGGREGATES","NUMERIC_AGGREGATES","DATE_AGGREGATES","availableAggregatesForColumn","column","aggregates","element","isRepeatableElement","isNumber","push","apply","isArray","isDate"],"mappings":"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","sourcesContent":["export const AggregateType = {\n  Sum: {\n    name: 'sum',\n    label: 'Sum'\n  },\n  Average: {\n    name: 'average',\n    label: 'Average'\n  },\n  Median: {\n    name: 'median',\n    label: 'Median'\n  },\n  Min: {\n    name: 'min',\n    label: 'Min'\n  },\n  Max: {\n    name: 'max',\n    label: 'Max'\n  },\n  StdDev: {\n    name: 'stddev',\n    label: 'Standard Deviation'\n  },\n  Histogram: {\n    name: 'histogram',\n    label: 'Histogram'\n  },\n  Empty: {\n    name: 'empty',\n    label: 'Count Blank',\n    count: true\n  },\n  NotEmpty: {\n    name: 'not_empty',\n    label: 'Count Not Blank',\n    count: true\n  },\n  Unique: {\n    name: 'unique',\n    label: 'Count Unique Values',\n    count: true\n  },\n  PercentEmpty: {\n    name: 'percent_empty',\n    label: '% Blank'\n  },\n  PercentNotEmpty: {\n    name: 'percent_not_empty',\n    label: '% Not Blank'\n  },\n  PercentUnique: {\n    name: 'percent_unique',\n    label: '% Unique'\n  }\n};\n\nexport const AggregatesByValue = {};\n\nfor (const key of Object.keys(AggregateType)) {\n  AggregatesByValue[AggregateType[key].name] = AggregateType[key];\n}\n\nconst TEXTUAL_AGGREGATES = [\n  AggregateType.Empty,\n  AggregateType.NotEmpty,\n  AggregateType.Unique\n];\n\nconst NUMERIC_AGGREGATES = [\n  AggregateType.Sum,\n  AggregateType.Average,\n  // AggregateType.Median,\n  AggregateType.Min,\n  AggregateType.Max,\n  AggregateType.StdDev,\n  AggregateType.Histogram,\n  AggregateType.Empty,\n  AggregateType.NotEmpty,\n  AggregateType.Unique\n];\n\nconst DATE_AGGREGATES = [\n  AggregateType.Min,\n  AggregateType.Max,\n  AggregateType.Histogram,\n  AggregateType.Empty,\n  AggregateType.NotEmpty,\n  AggregateType.Unique\n];\n\nexport function availableAggregatesForColumn(column) {\n  const aggregates = [];\n\n  if (column == null) {\n    return aggregates;\n  }\n\n  // Repeatable columns don't have a physical column to enable aggregates\n  // this column is the \"4 items\" value, which requires the in-memory record.\n  // Until we add an underlying db column for the item count, we can't do any\n  // aggregates on the repeatable itself.\n  if (column.element && column.element.isRepeatableElement) {\n    return aggregates;\n  }\n\n  if (column.isNumber) {\n    aggregates.push.apply(aggregates, NUMERIC_AGGREGATES);\n  } else if (column.isArray) {\n    // aggregates.push.apply(operators, ARRAY_OPERATORS);\n  } else if (column.isDate) {\n    aggregates.push.apply(aggregates, DATE_AGGREGATES);\n  } else {\n    aggregates.push.apply(aggregates, TEXTUAL_AGGREGATES);\n  }\n\n  return aggregates;\n}\n\nexport { TEXTUAL_AGGREGATES };\nexport { NUMERIC_AGGREGATES };\nexport { DATE_AGGREGATES };\n"],"file":"aggregate.js"}