{"version":3,"sources":["../src/column-filter.js"],"names":["ColumnFilter","attrs","schema","_field","field","_value","value","_schema","reset","resetIfEmpty","isEmptySet","clearValues","ensureValue","containsValue","push","toggleValue","without","indexOf","toJSON","hasFilter","toHumanDescription","column","name","join","isNull","length","columnForFieldKey","columnName"],"mappings":";;;;;;AAAA;;;;;;;;IAEqBA,Y;AACnB,wBAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AAAA;;AACzB,SAAKC,MAAL,GAAcF,MAAMG,KAApB;AACA,SAAKC,MAAL,GAAcJ,MAAMK,KAAN,IAAe,IAA7B;AACA,SAAKC,OAAL,GAAeL,MAAf;AACD;;yBAuCDM,K,oBAAQ;AACN,SAAKH,MAAL,GAAc,IAAd;AACD,G;;yBAEDI,Y,2BAAe;AACb,QAAI,KAAKC,UAAT,EAAqB;AACnB,WAAKF,KAAL;AACD;AACF,G;;yBAEDG,W,0BAAc;AACZ,SAAKN,MAAL,GAAc,EAAd;AACD,G;;yBAEDO,W,wBAAYN,K,EAAO;AACjB,QAAI,CAAC,KAAKD,MAAV,EAAkB;AAChB,WAAKA,MAAL,GAAc,EAAd;AACD;;AAED,QAAI,CAAC,KAAKQ,aAAL,CAAmBP,KAAnB,CAAL,EAAgC;AAC9B,WAAKD,MAAL,CAAYS,IAAZ,CAAiBR,KAAjB;AACD;AACF,G;;yBAEDS,W,wBAAYT,K,EAAO;AACjB,QAAI,CAAC,KAAKD,MAAV,EAAkB;AAChB,WAAKA,MAAL,GAAc,EAAd;AACD;;AAED,QAAI,KAAKQ,aAAL,CAAmBP,KAAnB,CAAJ,EAA+B;AAC7B,WAAKD,MAAL,GAAc,iBAAEW,OAAF,CAAU,KAAKV,KAAf,EAAsBA,KAAtB,CAAd;AACD,KAFD,MAEO;AACL,WAAKD,MAAL,CAAYS,IAAZ,CAAiBR,KAAjB;AACD;AACF,G;;yBAEDO,a,0BAAcP,K,EAAO;AACnB,QAAI,KAAKA,KAAL,IAAc,IAAlB,EAAwB;AACtB,aAAO,KAAP;AACD;;AAED,WAAO,KAAKA,KAAL,CAAWW,OAAX,CAAmBX,KAAnB,IAA4B,CAAC,CAApC;AACD,G;;yBAEDY,M,qBAAS;AACP,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,aAAO,IAAP;AACD;;AAED,WAAO;AACLf,aAAO,KAAKD,MADP;AAELG,aAAO,KAAKD;AAFP,KAAP;AAID,G;;yBAEDe,kB,iCAAqB;AACnB,QAAI,CAAC,KAAKD,SAAV,EAAqB;AACnB,aAAO,IAAP;AACD;;AAED,WAAO,CACL,KAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAA1B,GAAiC,KAAKlB,KADjC,EAEL,QAFK,EAGL,MAAM,KAAKE,KAAL,CAAWiB,IAAX,CAAgB,IAAhB,CAAN,GAA8B,GAHzB,EAILA,IAJK,CAIA,GAJA,CAAP;AAKD,G;;;;wBAtGW;AACV,aAAO,KAAKlB,MAAZ;AACD;;AAED;;;;wBACa;AACX,aAAO,KAAKC,KAAL,IAAc,IAArB;AACD;;;wBAEe;AACd,aAAO,CAAC,KAAKkB,MAAb;AACD;;;wBAEe;AACd,aAAO,KAAKlB,KAAL,IAAc,IAAd,IAAsB,KAAKA,KAAL,CAAWmB,MAAX,GAAoB,CAAjD;AACD;;AAED;;;;wBACiB;AACf,aAAO,KAAKnB,KAAL,IAAc,IAAd,IAAsB,KAAKA,KAAL,CAAWmB,MAAX,KAAsB,CAAnD;AACD;;;wBAEW;AACV,aAAO,KAAKtB,MAAZ;AACD;;;wBAEY;AACX,aAAO,KAAKI,OAAL,CAAamB,iBAAb,CAA+B,KAAKtB,KAApC,CAAP;AACD;;;wBAEgB;AACf,UAAI,KAAKiB,MAAT,EAAiB;AACf,eAAO,KAAKA,MAAL,CAAYM,UAAnB;AACD;AACD,aAAO,IAAP;AACD;;;;;;kBA1CkB3B,Y","file":"column-filter.js","sourcesContent":["import _ from 'lodash';\n\nexport default class ColumnFilter {\n  constructor(attrs, schema) {\n    this._field = attrs.field;\n    this._value = attrs.value || null;\n    this._schema = schema;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  // when the filter is fully blank (default state) all rows are returned\n  get isNull() {\n    return this.value == null;\n  }\n\n  get hasFilter() {\n    return !this.isNull;\n  }\n\n  get hasValues() {\n    return this.value != null && this.value.length > 0;\n  }\n\n  // when the set is empty, it should always return no results\n  get isEmptySet() {\n    return this.value != null && this.value.length === 0;\n  }\n\n  get field() {\n    return this._field;\n  }\n\n  get column() {\n    return this._schema.columnForFieldKey(this.field);\n  }\n\n  get columnName() {\n    if (this.column) {\n      return this.column.columnName;\n    }\n    return null;\n  }\n\n  reset() {\n    this._value = null;\n  }\n\n  resetIfEmpty() {\n    if (this.isEmptySet) {\n      this.reset();\n    }\n  }\n\n  clearValues() {\n    this._value = [];\n  }\n\n  ensureValue(value) {\n    if (!this._value) {\n      this._value = [];\n    }\n\n    if (!this.containsValue(value)) {\n      this._value.push(value);\n    }\n  }\n\n  toggleValue(value) {\n    if (!this._value) {\n      this._value = [];\n    }\n\n    if (this.containsValue(value)) {\n      this._value = _.without(this.value, value);\n    } else {\n      this._value.push(value);\n    }\n  }\n\n  containsValue(value) {\n    if (this.value == null) {\n      return false;\n    }\n\n    return this.value.indexOf(value) > -1;\n  }\n\n  toJSON() {\n    if (!this.hasFilter) {\n      return null;\n    }\n\n    return {\n      field: this._field,\n      value: this._value\n    };\n  }\n\n  toHumanDescription() {\n    if (!this.hasFilter) {\n      return null;\n    }\n\n    return [\n      this.column ? this.column.name : this.field,\n      'one of',\n      '[' + this.value.join(', ') + ']'\n    ].join(' ');\n  }\n}\n"]}