{"version":3,"sources":["../src/sort-expressions.js"],"names":["SortExpressions","sorts","schema","_expressions","map","o","_schema","sortByAsc","column","field","id","direction","sortByDesc","toJSON","expressions","toHumanDescription","hasSort","join","length","isEmpty"],"mappings":";;;;;;AAAA;;;;IAEqBA,e;AACnB,2BAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AAAA;;AACzB,SAAKC,YAAL,GAAoBF,MAAMG,GAAN,CAAU;AAAA,aAAK,eAASC,CAAT,EAAYH,MAAZ,CAAL;AAAA,KAAV,CAApB;AACA,SAAKI,OAAL,GAAeJ,MAAf;AACD;;4BAEDK,S,sBAAUC,M,EAAQ;AAChB,SAAKL,YAAL,GAAoB,CAAE,eAAS,EAACM,OAAOD,OAAOE,EAAf,EAAmBC,WAAW,KAA9B,EAAT,EAA+C,KAAKL,OAApD,CAAF,CAApB;AACD,G;;4BAEDM,U,uBAAWJ,M,EAAQ;AACjB,SAAKL,YAAL,GAAoB,CAAE,eAAS,EAACM,OAAOD,OAAOE,EAAf,EAAmBC,WAAW,MAA9B,EAAT,EAAgD,KAAKL,OAArD,CAAF,CAApB;AACD,G;;4BAcDO,M,qBAAS;AACP,WAAO,KAAKC,WAAL,CAAiBV,GAAjB,CAAqB;AAAA,aAAKC,EAAEQ,MAAF,EAAL;AAAA,KAArB,CAAP;AACD,G;;4BAEDE,kB,iCAAqB;AACnB,QAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,WAAO,KAAKF,WAAL,CAAiBV,GAAjB,CAAqB;AAAA,aAAKC,EAAEU,kBAAF,EAAL;AAAA,KAArB,EAAkDE,IAAlD,CAAuD,IAAvD,CAAP;AACD,G;;;;wBAtBa;AACZ,aAAO,KAAKd,YAAL,CAAkBe,MAAlB,KAA6B,CAApC;AACD;;;wBAEa;AACZ,aAAO,CAAC,KAAKC,OAAb;AACD;;;wBAEiB;AAChB,aAAO,KAAKhB,YAAZ;AACD;;;;;;kBAxBkBH,e","file":"sort-expressions.js","sourcesContent":["import { Sort } from './sort';\n\nexport default class SortExpressions {\n  constructor(sorts, schema) {\n    this._expressions = sorts.map(o => new Sort(o, schema));\n    this._schema = schema;\n  }\n\n  sortByAsc(column) {\n    this._expressions = [ new Sort({field: column.id, direction: 'asc'}, this._schema) ];\n  }\n\n  sortByDesc(column) {\n    this._expressions = [ new Sort({field: column.id, direction: 'desc'}, this._schema) ];\n  }\n\n  get isEmpty() {\n    return this._expressions.length === 0;\n  }\n\n  get hasSort() {\n    return !this.isEmpty;\n  }\n\n  get expressions() {\n    return this._expressions;\n  }\n\n  toJSON() {\n    return this.expressions.map(o => o.toJSON());\n  }\n\n  toHumanDescription() {\n    if (!this.hasSort) {\n      return null;\n    }\n\n    return this.expressions.map(o => o.toHumanDescription()).join(', ');\n  }\n}\n"]}