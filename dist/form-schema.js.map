{"version":3,"sources":["../src/form-schema.js"],"names":["SYSTEM_COLUMNS","FormSchema","form","rawColumns","repeatableColumns","_columns","_rawColumns","_rawColumnsByKey","_columnsByKey","column","indexOf","name","field","setupColumns","repeatableSchemas","repeatableSchemasByKey","repeatables","elementsOfType","repeatable","childSchema","key","push","addSystemColumn","label","attribute","columnName","statusField","isEnabled","columnObject","_status","isAssignmentEnabled","isProjectEnabled","elementsForColumns","element","isHidden","hasHiddenParent","Error","findColumnByID","id","columns","find","e","columnForFieldKey","fieldKey","_allElements","flattenElements","_elementsForColumns","elements","allElements","skip","isSectionElement","isRepeatableElement","isLabelElement"],"mappings":"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","file":"form-schema.js","sourcesContent":["import ElementColumn from './schema/element-column';\nimport SimpleColumn from './schema/simple-column';\nimport RepeatableSchema from './repeatable-schema';\n\nconst SYSTEM_COLUMNS = [\n  '_record_id',\n  '_project_id',\n  '_assigned_to_id',\n  '_status',\n  '_latitude',\n  '_longitude',\n  '_created_at',\n  '_updated_at',\n  '_version',\n  '_created_by_id',\n  '_updated_by_id',\n  '_server_created_at',\n  '_server_updated_at',\n  '_geometry',\n  '_altitude',\n  '_speed',\n  '_course',\n  '_horizontal_accuracy',\n  '_vertical_accuracy',\n  '_changeset_id',\n  '_title',\n  '_created_latitude',\n  '_created_longitude',\n  '_created_geometry',\n  '_created_altitude',\n  '_created_horizontal_accuracy',\n  '_updated_latitude',\n  '_updated_longitude',\n  '_updated_geometry',\n  '_updated_altitude',\n  '_updated_horizontal_accuracy',\n  '_created_duration',\n  '_updated_duration',\n  '_edited_duration'\n];\n\nexport default class FormSchema {\n  constructor(form, rawColumns, repeatableColumns) {\n    this.form = form;\n\n    this._columns = [];\n    this._rawColumns = rawColumns;\n\n    this._rawColumnsByKey = {};\n    this._columnsByKey = {};\n\n    for (const column of rawColumns) {\n      if (SYSTEM_COLUMNS.indexOf(column.name) !== -1) {\n        this._rawColumnsByKey[column.name] = column;\n      } else if (column.field) {\n        this._rawColumnsByKey[column.field] = column;\n      }\n    }\n\n    this.setupColumns();\n\n    this.repeatableSchemas = [];\n    this.repeatableSchemasByKey = {};\n\n    const repeatables = this.form.elementsOfType('Repeatable');\n\n    for (const repeatable of repeatables) {\n      const childSchema = new RepeatableSchema(this.form, repeatable, repeatableColumns[repeatable.key]);\n\n      this.repeatableSchemas.push(childSchema);\n      this.repeatableSchemasByKey[repeatable.key] = childSchema;\n    }\n  }\n\n  addSystemColumn(label, attribute, columnName) {\n    const column = new SimpleColumn(label, attribute, columnName);\n    this._columns.push(column);\n    this._columnsByKey[columnName] = column;\n  }\n\n  setupColumns() {\n    if (this.form.statusField.isEnabled) {\n      const columnObject = new ElementColumn(this.form.statusField,\n                                             this._rawColumnsByKey._status,\n                                             '_status');\n\n      this._columns.push(columnObject);\n\n      this._columnsByKey._status = columnObject;\n    }\n\n    this.addSystemColumn('Version', 'version', '_version');\n    this.addSystemColumn('Created', 'createdAt', '_server_created_at');\n    this.addSystemColumn('Updated', 'updatedAt', '_server_updated_at');\n    this.addSystemColumn('Created By', 'createdBy', '_created_by_id');\n    this.addSystemColumn('Updated By', 'updatedBy', '_updated_by_id');\n\n    if (this.form.isAssignmentEnabled) {\n      this.addSystemColumn('Assigned', 'assignedTo', '_assigned_to_id');\n    }\n\n    if (this.form.isProjectEnabled) {\n      this.addSystemColumn('Project', 'project', '_project_id');\n    }\n\n    for (const element of this.elementsForColumns) {\n      if (element.isHidden || element.hasHiddenParent) {\n        continue;\n      }\n\n      const column = this._rawColumnsByKey[element.key];\n\n      if (column == null) {\n        throw new Error('Column not found for element ' + element.key);\n      }\n\n      const columnObject = new ElementColumn(element, column);\n\n      this._columns.push(columnObject);\n\n      this._columnsByKey[element.key] = columnObject;\n    }\n  }\n\n  findColumnByID(id) {\n    return this.columns.find(e => e.id === id);\n  }\n\n  columnForFieldKey(fieldKey) {\n    return this._columnsByKey[fieldKey];\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  get allElements() {\n    if (!this._allElements) {\n      this._allElements = this.form.flattenElements(false);\n    }\n    return this._allElements;\n  }\n\n  get elementsForColumns() {\n    if (!this._elementsForColumns) {\n      this._elementsForColumns = [];\n\n      const elements = this.allElements;\n\n      for (const element of elements) {\n        const skip = element.isSectionElement ||\n                     element.isRepeatableElement ||\n                     element.isLabelElement ||\n                     element.isHidden;\n\n        if (!skip) {\n          this._elementsForColumns.push(element);\n        }\n      }\n    }\n\n    return this._elementsForColumns;\n  }\n}\n"]}