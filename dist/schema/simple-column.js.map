{"version":3,"sources":["../../src/schema/simple-column.js"],"names":["SimpleColumn","name","attributeName","columnName","type","accessor","join","sql","index","defaultAccessor","object","_type","_name","_attributeName","_columnName","_accessor","_sql","_index","_join","valueFrom","exportValue","options","split"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;IAEqBA,Y;;;AACnB,8BAA6G;AAAA,QAAhGC,IAAgG,QAAhGA,IAAgG;AAAA,QAA1FC,aAA0F,QAA1FA,aAA0F;AAAA,QAA3EC,UAA2E,QAA3EA,UAA2E;AAAA,yBAA/DC,IAA+D;AAAA,QAA/DA,IAA+D,6BAAxD,IAAwD;AAAA,6BAAlDC,QAAkD;AAAA,QAAlDA,QAAkD,iCAAvC,IAAuC;AAAA,yBAAjCC,IAAiC;AAAA,QAAjCA,IAAiC,6BAA1B,IAA0B;AAAA,wBAApBC,GAAoB;AAAA,QAApBA,GAAoB,4BAAd,IAAc;AAAA,QAARC,KAAQ,QAARA,KAAQ;;AAAA;;AAAA,iDAC3G,kBAD2G;;AAAA,UAwD7GC,eAxD6G,GAwD3F,UAACC,MAAD,EAAY;AAC5B,aAAOA,OAAO,MAAKR,aAAZ,CAAP;AACD,KA1D4G;;AAG3G,UAAKS,KAAL,GAAaP,QAAQ,QAArB;AACA,UAAKQ,KAAL,GAAaX,IAAb;AACA,UAAKY,cAAL,GAAsBX,aAAtB;AACA,UAAKY,WAAL,GAAmBX,UAAnB;AACA,UAAKY,SAAL,GAAiBV,YAAY,MAAKI,eAAlC;AACA,UAAKO,IAAL,GAAY,CAAC,CAACT,GAAd;AACA,UAAKU,MAAL,GAAcT,KAAd;;AAEA,QAAIF,IAAJ,EAAU;AACR,YAAKY,KAAL,GAAa,mBAASZ,IAAT,CAAb;AACD;AAb0G;AAc5G;;yBA8CDa,S,sBAAUT,M,EAAQ;AAChB,WAAO,KAAKK,SAAL,CAAeL,MAAf,CAAP;AACD,G;;yBAEDU,W,wBAAYV,M,EAAsB;AAAA,QAAdW,OAAc,uEAAJ,EAAI;;AAChC,WAAO,KAAKN,SAAL,CAAeL,MAAf,EAAuBW,OAAvB,CAAP;AACD,G;;;;wBAlDU;AACT,aAAO,KAAKV,KAAZ;AACD;;;wBAEQ;AACP,aAAO,KAAKG,WAAZ;AACD;;;wBAEU;AACT,aAAO,KAAKF,KAAZ;AACD;;;wBAEU;AACT,aAAO,KAAKM,KAAZ;AACD;;;wBAEY;AACX,UAAI,KAAKZ,IAAT,EAAe;AACb,eAAO,KAAKQ,WAAL,CAAiBQ,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAP;AACD;;AAED,aAAO,IAAP;AACD;;;wBAEsB;AACrB,aAAO,KAAKnB,UAAZ;AACD;;;wBAEgB;AACf,UAAI,KAAKG,IAAT,EAAe;AACb,eAAO,KAAKQ,WAAL,CAAiBQ,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAAP;AACD;;AAED,aAAO,KAAKR,WAAZ;AACD;;;wBAEmB;AAClB,aAAO,KAAKD,cAAZ;AACD;;;wBAcW;AACV,aAAO,KAAKG,IAAZ;AACD;;;;;;kBAvEkBhB,Y","file":"simple-column.js","sourcesContent":["import Column from './column';\nimport Join from './join';\n\nexport default class SimpleColumn extends Column {\n  constructor({name, attributeName, columnName, type = null, accessor = null, join = null, sql = null, index}) {\n    super();\n\n    this._type = type || 'string';\n    this._name = name;\n    this._attributeName = attributeName;\n    this._columnName = columnName;\n    this._accessor = accessor || this.defaultAccessor;\n    this._sql = !!sql;\n    this._index = index;\n\n    if (join) {\n      this._join = new Join(join);\n    }\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get id() {\n    return this._columnName;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get join() {\n    return this._join;\n  }\n\n  get source() {\n    if (this.join) {\n      return this._columnName.split('.')[0];\n    }\n\n    return null;\n  }\n\n  get joinedColumnName() {\n    return this.columnName;\n  }\n\n  get columnName() {\n    if (this.join) {\n      return this._columnName.split('.')[1];\n    }\n\n    return this._columnName;\n  }\n\n  get attributeName() {\n    return this._attributeName;\n  }\n\n  defaultAccessor = (object) => {\n    return object[this.attributeName];\n  }\n\n  valueFrom(object) {\n    return this._accessor(object);\n  }\n\n  exportValue(object, options = {}) {\n    return this._accessor(object, options);\n  }\n\n  get isSQL() {\n    return this._sql;\n  }\n}\n"]}